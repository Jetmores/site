<!DOCTYPE html>
<html>
  <head id="head">
	<meta charset="UTF-8">
	<title id="title">YuHeng&apos;s blog! - Zine</title>
	<link href="/style.css" rel="stylesheet">
  </head>
<body>
	<nav id="menu" class="centered">
		<a href="/">主页</a>
		<a href="/blog/">日志</a>
		<a href="/sample/">用例</a>
	</nav>
	<h1>zigLearn</h1>
	<div id="content"><h2>基础</h2><h3>print</h3><pre><code class="zig"><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">debug</span><span class="punctuation delimiter">.</span><span class="function">print</span><span class="punctuation bracket">(</span><span class="string">&quot;Hello, world!\n&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="error">;
try std</span><span class="punctuation delimiter">.</span><span class="variable builtin">io</span><span class="punctuation delimiter">.</span><span class="function">getStdOut</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">writer</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">print</span><span class="punctuation bracket">(</span><span class="string">&quot;Hello, {s}!\n&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="string">&quot;world&quot;</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="error">;

占位符:{}默认自适应类型
c
d(还有b,o,x,X):10进制整型和浮点
e:科学计数法
s
*:指针</span>
<span class="comment">//#:打印值的原始16进制--暂不知和*有啥区别</span>
<span class="comment">//?:调试信息</span>
</code></pre>
<p>{[position][specifier]:[fill][alignment][width].[precision]}</p><table>
<thead>
<tr>
<th align="center">Name</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Position</td>
<td align="center">The index of the argument that should be inserted</td>
</tr>
<tr>
<td align="center">Specifier</td>
<td align="center">A type-dependent formatting option</td>
</tr>
<tr>
<td align="center">Fill</td>
<td align="center">A single character used for padding</td>
</tr>
<tr>
<td align="center">Alignment</td>
<td align="center">One of three characters ‘&lt;’, ‘^’ or ‘&gt;’; these are for left, middle and right alignment</td>
</tr>
<tr>
<td align="center">Width</td>
<td align="center">The total width of the field (characters)</td>
</tr>
<tr>
<td align="center">Precision</td>
<td align="center">How many decimals a formatted number should have</td>
</tr>
</tbody>
</table>
<pre><code class="zig"><span class="variable">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span><span class="operator">try</span> <span class="variable">bufPrint</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">b</span><span class="punctuation delimiter">,</span> <span class="string">&quot;{0s}{1s}{1s}&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="string">&quot;a&quot;</span><span class="punctuation delimiter">,</span> <span class="string">&quot;b&quot;</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">,</span><span class="string">&quot;abb&quot;</span><span class="punctuation delimiter">,</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="error">;
try expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span><span class="operator">try</span> <span class="variable">bufPrint</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">b</span><span class="punctuation delimiter">,</span> <span class="string">&quot;{d:.2}&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="float">3.14159</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">,</span><span class="string">&quot;3.14&quot;</span><span class="punctuation delimiter">,</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="error">;
try expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span><span class="operator">try</span> <span class="variable">bufPrint</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">b</span><span class="punctuation delimiter">,</span> <span class="string">&quot;{s:_^6}&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="string">&quot;hi!&quot;</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">,</span><span class="string">&quot;_hi!__&quot;</span><span class="punctuation delimiter">,</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="error">;</span>
</code></pre>
<h3>log</h3><pre><code class="zig"><span class="comment">/// The default log level is based on build mode.
</span><span class="attribute">pub</span> <span class="type qualifier">const</span> <span class="variable">default_level</span><span class="punctuation delimiter">:</span> <span class="variable">Level</span> = <span class="conditional">switch</span> <span class="punctuation bracket">(</span><span class="variable">builtin</span><span class="punctuation delimiter">.</span><span class="field">mode</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
    <span class="punctuation delimiter">.</span><span class="variable builtin">Debug</span> =&gt; <span class="punctuation delimiter">.</span><span class="variable builtin">debug</span><span class="punctuation delimiter">,</span>
    <span class="punctuation delimiter">.</span><span class="variable builtin">ReleaseSafe</span> =&gt; <span class="punctuation delimiter">.</span><span class="variable builtin">info</span><span class="punctuation delimiter">,</span>
    <span class="punctuation delimiter">.</span><span class="variable builtin">ReleaseFast</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="variable builtin">ReleaseSmall</span> =&gt; <span class="punctuation delimiter">.</span><span class="variable builtin">err</span><span class="punctuation delimiter">,</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">log</span><span class="punctuation delimiter">.</span><span class="function">debug</span><span class="punctuation bracket">(</span><span class="string">&quot;A borderline useless debug log message&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="error">;//Debug
std</span><span class="punctuation delimiter">.</span><span class="variable builtin">log</span><span class="punctuation delimiter">.</span><span class="function">info</span><span class="punctuation bracket">(</span><span class="string">&quot;Flux capacitor is starting to overheat&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="error">;//Debug and Safe
std</span><span class="punctuation delimiter">.</span><span class="variable builtin">log</span><span class="punctuation delimiter">.</span><span class="function">warn</span><span class="punctuation bracket">(</span><span class="string">&quot;Warn&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="error">;//Debug and Safe
std</span><span class="punctuation delimiter">.</span><span class="variable builtin">log</span><span class="punctuation delimiter">.</span><span class="function">err</span><span class="punctuation bracket">(</span><span class="string">&quot;Error&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="error">;</span><span class="comment">//Fast and Small</span>
</code></pre>
<h3>expect</h3><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">expect</span> = <span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;std&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">testing</span><span class="punctuation delimiter">.</span><span class="field">expect</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;if statement&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">a</span> = <span class="boolean">true</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">u16</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">a</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="variable">x</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span> <span class="conditional">else</span> <span class="punctuation bracket">{</span>
        <span class="variable">x</span> <span class="operator">+=</span> <span class="number">2</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">x</span> <span class="operator">==</span> <span class="number">1</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>Value assignment ?赋值</h3><pre><code class="zig"><span class="comment">//(const|var) identifier[: type] = value</span>
<span class="type qualifier">var</span> <span class="variable">variable</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="number">5000</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">var</span> <span class="variable">inferred_variable</span> = <span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">u32</span><span class="punctuation delimiter">,</span> <span class="number">5000</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">var</span> <span class="variable">b</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>

<span class="type qualifier">const</span> <span class="variable">a</span> = <span class="punctuation bracket">[</span><span class="number">5</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span> <span class="character">&apos;h&apos;</span><span class="punctuation delimiter">,</span> <span class="character">&apos;e&apos;</span><span class="punctuation delimiter">,</span> <span class="character">&apos;l&apos;</span><span class="punctuation delimiter">,</span> <span class="character">&apos;l&apos;</span><span class="punctuation delimiter">,</span> <span class="character">&apos;o&apos;</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">array</span> = <span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span> <span class="character">&apos;h&apos;</span><span class="punctuation delimiter">,</span> <span class="character">&apos;e&apos;</span><span class="punctuation delimiter">,</span> <span class="character">&apos;l&apos;</span><span class="punctuation delimiter">,</span> <span class="character">&apos;l&apos;</span><span class="punctuation delimiter">,</span> <span class="character">&apos;o&apos;</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">length</span> = <span class="variable">array</span><span class="punctuation delimiter">.</span><span class="field">len</span><span class="punctuation delimiter">;</span> <span class="comment">// 5</span>
</code></pre>
<h3>if</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;if statement expression&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">a</span> = <span class="boolean">true</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">u16</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="variable">x</span> <span class="operator">+=</span> <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">a</span><span class="punctuation bracket">)</span> <span class="number">1</span> <span class="conditional">else</span> <span class="number">2</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">x</span> <span class="operator">==</span> <span class="number">1</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>switch</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;switch expression&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">i8</span> = <span class="number">10</span><span class="punctuation delimiter">;</span>
    <span class="variable">x</span> <span class="operator">=</span> <span class="conditional">switch</span> <span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="operator">-</span><span class="number">1</span><span class="punctuation special">...</span><span class="number">1</span> =&gt; <span class="operator">-</span><span class="variable">x</span><span class="punctuation delimiter">,</span>
        <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="number">100</span> =&gt; <span class="function builtin">@divExact</span><span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">,</span>
        <span class="conditional">else</span> =&gt; <span class="variable">x</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">x</span> <span class="operator">==</span> <span class="number">1</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>unreachable</h3><p>noreturn type, can coerce to any other type.</p><pre><code class="zig"><span class="keyword function">fn</span> <span class="function">asciiToUpper</span><span class="punctuation bracket">(</span><span class="parameter">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span><span class="punctuation bracket">)</span> <span class="type builtin">u8</span> <span class="punctuation bracket">{</span>
    <span class="keyword return">return</span> <span class="conditional">switch</span> <span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="character">&apos;a&apos;</span><span class="punctuation special">...</span><span class="character">&apos;z&apos;</span> =&gt; <span class="variable">x</span> <span class="operator">+</span> <span class="character">&apos;A&apos;</span> <span class="operator">-</span> <span class="character">&apos;a&apos;</span><span class="punctuation delimiter">,</span>
        <span class="character">&apos;A&apos;</span><span class="punctuation special">...</span><span class="character">&apos;Z&apos;</span> =&gt; <span class="variable">x</span><span class="punctuation delimiter">,</span>
        <span class="conditional">else</span> =&gt; <span class="constant builtin">unreachable</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;unreachable switch&quot;</span> <span class="punctuation bracket">{</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">asciiToUpper</span><span class="punctuation bracket">(</span><span class="character">&apos;a&apos;</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="character">&apos;A&apos;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">asciiToUpper</span><span class="punctuation bracket">(</span><span class="character">&apos;A&apos;</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="character">&apos;A&apos;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//pub fn main() !void {//Debug,ReleaseSafe:reached unreachable code;Fast,Small:Segmentation fault</span>
<span class="keyword">test</span> <span class="string">&quot;unreachable and -O&quot;</span> <span class="punctuation bracket">{</span><span class="comment">//Debug,ReleaseSafe:reached unreachable code;Fast,Small:passed</span>
    <span class="type qualifier">var</span> <span class="variable">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">i8</span> = <span class="number">11</span><span class="punctuation delimiter">;</span>
    <span class="variable">x</span> <span class="operator">=</span> <span class="conditional">switch</span> <span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="operator">-</span><span class="number">1</span><span class="punctuation special">...</span><span class="number">1</span> =&gt; <span class="operator">-</span><span class="variable">x</span><span class="punctuation delimiter">,</span>
        <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="number">100</span> =&gt; <span class="function builtin">@divExact</span><span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">,</span>
        <span class="conditional">else</span> =&gt; <span class="constant builtin">unreachable</span><span class="punctuation delimiter">,</span> <span class="comment">//Debug,ReleaseSafe:reached unreachable code;Fast,Small:Segmentation fault</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="comment">//try expect(x == 1);</span>
    <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">debug</span><span class="punctuation delimiter">.</span><span class="function">print</span><span class="punctuation bracket">(</span><span class="string">&quot;Hello, {s}!\n&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="string">&quot;World&quot;</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//src</span>
<span class="type qualifier">const</span> <span class="variable">assert</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">debug</span><span class="punctuation delimiter">.</span><span class="field">assert</span><span class="punctuation delimiter">;</span>
<span class="attribute">pub</span> <span class="keyword function">fn</span> <span class="function">assert</span><span class="punctuation bracket">(</span><span class="parameter">ok</span><span class="punctuation delimiter">:</span> <span class="type builtin">bool</span><span class="punctuation bracket">)</span> <span class="type builtin">void</span> <span class="punctuation bracket">{</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="operator">!</span><span class="variable">ok</span><span class="punctuation bracket">)</span> <span class="constant builtin">unreachable</span><span class="punctuation delimiter">;</span> <span class="comment">// assertion failure</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>label</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;labelled blocks&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">count</span> = <span class="label">blk</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">{</span>
        <span class="type qualifier">var</span> <span class="variable">sum</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
        <span class="type qualifier">var</span> <span class="variable">i</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
        <span class="repeat">while</span> <span class="punctuation bracket">(</span><span class="variable">i</span> <span class="operator">&lt;</span> <span class="number">10</span><span class="punctuation bracket">)</span> <span class="punctuation delimiter">:</span> <span class="punctuation bracket">(</span><span class="variable">i</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation bracket">)</span> <span class="variable">sum</span> <span class="operator">+=</span> <span class="variable">i</span><span class="punctuation delimiter">;</span>
        <span class="repeat">break</span> <span class="punctuation delimiter">:</span><span class="label">blk</span> <span class="variable">sum</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">count</span> <span class="operator">==</span> <span class="number">45</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">count</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="type builtin">u32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;nested continue&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">count</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="label">outer</span><span class="punctuation delimiter">:</span> <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">i32</span><span class="punctuation bracket">{</span> <span class="number">1</span><span class="punctuation delimiter">,</span> <span class="number">2</span><span class="punctuation delimiter">,</span> <span class="number">3</span><span class="punctuation delimiter">,</span> <span class="number">4</span><span class="punctuation delimiter">,</span> <span class="number">5</span><span class="punctuation delimiter">,</span> <span class="number">6</span><span class="punctuation delimiter">,</span> <span class="number">7</span><span class="punctuation delimiter">,</span> <span class="number">8</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span> |<span class="variable">_</span>| <span class="punctuation bracket">{</span>
        <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">i32</span><span class="punctuation bracket">{</span> <span class="number">1</span><span class="punctuation delimiter">,</span> <span class="number">2</span><span class="punctuation delimiter">,</span> <span class="number">3</span><span class="punctuation delimiter">,</span> <span class="number">4</span><span class="punctuation delimiter">,</span> <span class="number">5</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span> |<span class="variable">_</span>| <span class="punctuation bracket">{</span>
            <span class="variable">count</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
            <span class="repeat">continue</span> <span class="punctuation delimiter">:</span><span class="label">outer</span><span class="punctuation delimiter">;</span>
        <span class="punctuation bracket">}</span>
    <span class="punctuation bracket">}</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">count</span> <span class="operator">==</span> <span class="number">8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>while</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;while with continue&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">sum</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">i</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="repeat">while</span> <span class="punctuation bracket">(</span><span class="variable">i</span> <span class="operator">&lt;=</span> <span class="number">3</span><span class="punctuation bracket">)</span> <span class="punctuation delimiter">:</span> <span class="punctuation bracket">(</span><span class="variable">i</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">i</span> <span class="operator">==</span> <span class="number">2</span><span class="punctuation bracket">)</span> <span class="repeat">continue</span><span class="punctuation delimiter">;</span><span class="comment">//or break</span>
        <span class="variable">sum</span> <span class="operator">+=</span> <span class="variable">i</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">sum</span> <span class="operator">==</span> <span class="number">4</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword function">fn</span> <span class="function">rangeHasNumber</span><span class="punctuation bracket">(</span><span class="parameter">begin</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span><span class="punctuation delimiter">,</span> <span class="parameter">end</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span><span class="punctuation delimiter">,</span> <span class="parameter">number</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span><span class="punctuation bracket">)</span> <span class="type builtin">bool</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">i</span> = <span class="variable">begin</span><span class="punctuation delimiter">;</span>
    <span class="keyword return">return</span> <span class="repeat">while</span> <span class="punctuation bracket">(</span><span class="variable">i</span> <span class="operator">&lt;</span> <span class="variable">end</span><span class="punctuation bracket">)</span> <span class="punctuation delimiter">:</span> <span class="punctuation bracket">(</span><span class="variable">i</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">i</span> <span class="operator">==</span> <span class="variable">number</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
            <span class="repeat">break</span> <span class="boolean">true</span><span class="punctuation delimiter">;</span>
        <span class="punctuation bracket">}</span>
    <span class="punctuation bracket">}</span> <span class="conditional">else</span> <span class="boolean">false</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;while loop expression&quot;</span> <span class="punctuation bracket">{</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">rangeHasNumber</span><span class="punctuation bracket">(</span><span class="number">0</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="number">3</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>for</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;for&quot;</span> <span class="punctuation bracket">{</span>
    <span class="comment">//character literals are equivalent to integer literals</span>
    <span class="type qualifier">const</span> <span class="variable">string</span> = <span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span> <span class="character">&apos;a&apos;</span><span class="punctuation delimiter">,</span> <span class="character">&apos;b&apos;</span><span class="punctuation delimiter">,</span> <span class="character">&apos;c&apos;</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

    <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="variable">string</span><span class="punctuation bracket">)</span> |<span class="variable">character</span>| <span class="punctuation bracket">{</span>
        <span class="variable">_</span> <span class="operator">=</span> <span class="variable">character</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="variable">string</span><span class="punctuation bracket">)</span> |<span class="variable">_</span>| <span class="punctuation bracket">{</span><span class="punctuation bracket">}</span>

    <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="variable">string</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation special">..</span><span class="punctuation bracket">)</span> |<span class="variable">character</span><span class="punctuation delimiter">,</span> <span class="variable">index</span>| <span class="punctuation bracket">{</span>
        <span class="variable">_</span> <span class="operator">=</span> <span class="variable">character</span><span class="punctuation delimiter">;</span>
        <span class="variable">_</span> <span class="operator">=</span> <span class="variable">index</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="variable">string</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation special">..</span><span class="punctuation bracket">)</span> |<span class="variable">_</span><span class="punctuation delimiter">,</span> <span class="variable">index</span>| <span class="punctuation bracket">{</span>
        <span class="variable">_</span> <span class="operator">=</span> <span class="variable">index</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;inline for&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">types</span> = <span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">type</span><span class="punctuation bracket">{</span> <span class="type builtin">i32</span><span class="punctuation delimiter">,</span> <span class="type builtin">f32</span><span class="punctuation delimiter">,</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="type builtin">bool</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">sum</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="attribute">inline</span> <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="variable">types</span><span class="punctuation bracket">)</span> |<span class="variable">T</span>| <span class="variable">sum</span> <span class="operator">+=</span> <span class="function builtin">@sizeOf</span><span class="punctuation bracket">(</span><span class="variable">T</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">sum</span> <span class="operator">==</span> <span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>fn</h3><pre><code class="zig"><span class="keyword function">fn</span> <span class="function">fibonacci</span><span class="punctuation bracket">(</span><span class="parameter">n</span><span class="punctuation delimiter">:</span> <span class="type builtin">u16</span><span class="punctuation bracket">)</span> <span class="type builtin">u16</span> <span class="punctuation bracket">{</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">n</span> <span class="operator">==</span> <span class="number">0</span> <span class="keyword operator">or</span> <span class="variable">n</span> <span class="operator">==</span> <span class="number">1</span><span class="punctuation bracket">)</span> <span class="keyword return">return</span> <span class="variable">n</span><span class="punctuation delimiter">;</span>
    <span class="keyword return">return</span> <span class="variable">fibonacci</span><span class="punctuation bracket">(</span><span class="variable">n</span> <span class="operator">-</span> <span class="number">1</span><span class="punctuation bracket">)</span> <span class="operator">+</span> <span class="variable">fibonacci</span><span class="punctuation bracket">(</span><span class="variable">n</span> <span class="operator">-</span> <span class="number">2</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;function recursion&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">x</span> = <span class="variable">fibonacci</span><span class="punctuation bracket">(</span><span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">x</span> <span class="operator">==</span> <span class="number">55</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>defer</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;multi defer&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">f32</span> = <span class="number">5</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">{</span>
        <span class="keyword">defer</span> <span class="variable">x</span> <span class="operator">+=</span> <span class="number">2</span><span class="punctuation delimiter">;</span>
        <span class="keyword">defer</span> <span class="variable">x</span> <span class="operator">/=</span> <span class="number">2</span><span class="punctuation delimiter">;</span>
        <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">x</span> <span class="operator">==</span> <span class="number">5</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">x</span> <span class="operator">==</span> <span class="float">4.5</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>error:like enum</h3><p>try x is a shortcut for x catch |err| return err</p><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">FileOpenError</span> = <span class="keyword">error</span><span class="punctuation bracket">{</span>
    <span class="variable builtin">AccessDenied</span><span class="punctuation delimiter">,</span>
    <span class="variable builtin">OutOfMemory</span><span class="punctuation delimiter">,</span>
    <span class="variable builtin">FileNotFound</span><span class="punctuation delimiter">,</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">AllocationError</span> = <span class="keyword">error</span><span class="punctuation bracket">{</span><span class="variable builtin">OutOfMemory</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="comment">//一种自动提升</span>
<span class="keyword">test</span> <span class="string">&quot;coerce error from a subset to a superset&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">err</span><span class="punctuation delimiter">:</span> <span class="variable">FileOpenError</span> = <span class="variable">AllocationError</span><span class="punctuation delimiter">.</span><span class="field">OutOfMemory</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">err</span> <span class="operator">==</span> <span class="variable">FileOpenError</span><span class="punctuation delimiter">.</span><span class="field">OutOfMemory</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword function">fn</span> <span class="function">failingFunction</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="keyword">error</span><span class="punctuation bracket">{</span><span class="variable builtin">Oops</span><span class="punctuation bracket">}</span><span class="exception">!</span><span class="type builtin">void</span> <span class="punctuation bracket">{</span>
    <span class="keyword return">return</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">Oops</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;returning an error&quot;</span> <span class="punctuation bracket">{</span>
    <span class="variable">failingFunction</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="operator">catch |err|</span> <span class="punctuation bracket">{</span>
        <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">err</span> <span class="operator">==</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">Oops</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="keyword return">return</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="type qualifier">var</span> <span class="variable">problems</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="number">98</span><span class="punctuation delimiter">;</span>

<span class="keyword function">fn</span> <span class="function">failFnCounter</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="keyword">error</span><span class="punctuation bracket">{</span><span class="variable builtin">Oops</span><span class="punctuation bracket">}</span><span class="exception">!</span><span class="type builtin">void</span> <span class="punctuation bracket">{</span>
    <span class="keyword">errdefer</span> <span class="variable">problems</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">failingFunction</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;errdefer&quot;</span> <span class="punctuation bracket">{</span>
    <span class="variable">failFnCounter</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="operator">catch |err|</span> <span class="punctuation bracket">{</span>
        <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">err</span> <span class="operator">==</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">Oops</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">problems</span> <span class="operator">==</span> <span class="number">99</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="keyword return">return</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword function">fn</span> <span class="function">createFile</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="exception">!</span><span class="type builtin">void</span> <span class="punctuation bracket">{</span>
    <span class="keyword return">return</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">AccessDenied</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;inferred error set&quot;</span> <span class="punctuation bracket">{</span>
    <span class="comment">//type coercion successfully takes place</span>
    <span class="type qualifier">const</span> <span class="variable">x</span><span class="punctuation delimiter">:</span> <span class="keyword">error</span><span class="punctuation bracket">{</span><span class="variable builtin">AccessDenied</span><span class="punctuation bracket">}</span><span class="exception">!</span><span class="type builtin">void</span> = <span class="variable">createFile</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="comment">//Zig does not let us ignore error unions via _ = x;</span>
    <span class="comment">//we must unwrap it with &quot;try&quot;, &quot;catch&quot;, or &quot;if&quot; by any means</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">x</span> <span class="operator">catch</span> <span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//Error sets can be merged</span>
<span class="type qualifier">const</span> <span class="variable">A</span> = <span class="keyword">error</span><span class="punctuation bracket">{</span> <span class="variable builtin">NotDir</span><span class="punctuation delimiter">,</span> <span class="variable builtin">PathNotFound</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">B</span> = <span class="keyword">error</span><span class="punctuation bracket">{</span> <span class="variable builtin">OutOfMemory</span><span class="punctuation delimiter">,</span> <span class="variable builtin">PathNotFound</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">C</span> = <span class="variable">A</span> <span class="operator">||</span> <span class="variable">B</span><span class="punctuation delimiter">;</span>
<span class="comment">//anyerror is the global error set, which due to being the superset of all error sets, can have an error from any set coerced to it.</span>
</code></pre>
<h3>setRuntimeSafety</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;out of bounds&quot;</span> <span class="punctuation bracket">{</span>
    <span class="function builtin">@setRuntimeSafety</span><span class="punctuation bracket">(</span><span class="boolean">false</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">a</span> = <span class="punctuation bracket">[</span><span class="number">3</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span> <span class="number">1</span><span class="punctuation delimiter">,</span> <span class="number">2</span><span class="punctuation delimiter">,</span> <span class="number">3</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">index</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span> = <span class="number">5</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">b</span> = <span class="variable">a</span><span class="punctuation bracket">[</span><span class="variable">index</span><span class="punctuation bracket">]</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">b</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>@Vector</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;Basic vector usage&quot;</span> <span class="punctuation bracket">{</span>
    <span class="comment">// Vectors have a compile-time known length and base type.</span>
    <span class="type qualifier">const</span> <span class="variable">a</span> = <span class="function builtin">@Vector</span><span class="punctuation bracket">(</span><span class="number">4</span><span class="punctuation delimiter">,</span> <span class="type builtin">i32</span><span class="punctuation bracket">)</span><span class="punctuation bracket">{</span> <span class="number">1</span><span class="punctuation delimiter">,</span> <span class="number">2</span><span class="punctuation delimiter">,</span> <span class="number">3</span><span class="punctuation delimiter">,</span> <span class="number">4</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">b</span> = <span class="function builtin">@Vector</span><span class="punctuation bracket">(</span><span class="number">4</span><span class="punctuation delimiter">,</span> <span class="type builtin">i32</span><span class="punctuation bracket">)</span><span class="punctuation bracket">{</span> <span class="number">5</span><span class="punctuation delimiter">,</span> <span class="number">6</span><span class="punctuation delimiter">,</span> <span class="number">7</span><span class="punctuation delimiter">,</span> <span class="number">8</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

    <span class="comment">// Math operations take place element-wise.</span>
    <span class="type qualifier">const</span> <span class="variable">c</span> = <span class="variable">a</span> <span class="operator">+</span> <span class="variable">b</span><span class="punctuation delimiter">;</span>

    <span class="comment">// Individual vector elements can be accessed using array indexing syntax.</span>
    <span class="operator">try</span> <span class="variable">expectEqual</span><span class="punctuation bracket">(</span><span class="number">12</span><span class="punctuation delimiter">,</span> <span class="variable">c</span><span class="punctuation bracket">[</span><span class="number">3</span><span class="punctuation bracket">]</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="number">12</span> <span class="operator">==</span> <span class="variable">c</span><span class="punctuation bracket">[</span><span class="number">3</span><span class="punctuation bracket">]</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">meta</span><span class="punctuation delimiter">.</span><span class="function">eql</span><span class="punctuation bracket">(</span><span class="variable">c</span><span class="punctuation delimiter">,</span> <span class="function builtin">@Vector</span><span class="punctuation bracket">(</span><span class="number">4</span><span class="punctuation delimiter">,</span> <span class="type builtin">i32</span><span class="punctuation bracket">)</span><span class="punctuation bracket">{</span> <span class="number">6</span><span class="punctuation delimiter">,</span> <span class="number">8</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="number">12</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;Conversion between vectors, arrays, and slices&quot;</span> <span class="punctuation bracket">{</span>
    <span class="comment">// Vectors and fixed-length arrays can be automatically assigned back and forth</span>
    <span class="type qualifier">var</span> <span class="variable">arr1</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="number">4</span><span class="punctuation bracket">]</span><span class="type builtin">f32</span> = <span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">f32</span><span class="punctuation bracket">{</span> <span class="float">1.1</span><span class="punctuation delimiter">,</span> <span class="float">3.2</span><span class="punctuation delimiter">,</span> <span class="float">4.5</span><span class="punctuation delimiter">,</span> <span class="float">5.6</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">vec</span><span class="punctuation delimiter">:</span> <span class="function builtin">@Vector</span><span class="punctuation bracket">(</span><span class="number">4</span><span class="punctuation delimiter">,</span> <span class="type builtin">f32</span><span class="punctuation bracket">)</span> = <span class="variable">arr1</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">arr2</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="number">4</span><span class="punctuation bracket">]</span><span class="type builtin">f32</span> = <span class="variable">vec</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expectEqual</span><span class="punctuation bracket">(</span><span class="variable">arr1</span><span class="punctuation delimiter">,</span> <span class="variable">arr2</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="comment">// You can also assign from a slice with comptime-known length to a vector using .*</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">arr1</span><span class="punctuation bracket">[</span><span class="number">1</span><span class="punctuation special">..</span><span class="number">3</span><span class="punctuation bracket">]</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="punctuation bracket">(</span><span class="operator">*</span><span class="punctuation bracket">[</span><span class="number">2</span><span class="punctuation bracket">]</span><span class="type builtin">f32</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">arr1</span><span class="punctuation bracket">[</span><span class="number">1</span><span class="punctuation special">..</span><span class="number">3</span><span class="punctuation bracket">]</span><span class="operator">.*</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="punctuation bracket">(</span><span class="punctuation bracket">[</span><span class="number">2</span><span class="punctuation bracket">]</span><span class="type builtin">f32</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">vec2</span><span class="punctuation delimiter">:</span> <span class="function builtin">@Vector</span><span class="punctuation bracket">(</span><span class="number">2</span><span class="punctuation delimiter">,</span> <span class="type builtin">f32</span><span class="punctuation bracket">)</span> = <span class="variable">arr1</span><span class="punctuation bracket">[</span><span class="number">1</span><span class="punctuation special">..</span><span class="number">3</span><span class="punctuation bracket">]</span><span class="operator">.*</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">slice</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">f32</span> = <span class="operator">&amp;</span><span class="variable">arr1</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">offset</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="number">1</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">vec3</span><span class="punctuation delimiter">:</span> <span class="function builtin">@Vector</span><span class="punctuation bracket">(</span><span class="number">2</span><span class="punctuation delimiter">,</span> <span class="type builtin">f32</span><span class="punctuation bracket">)</span> = <span class="variable">slice</span><span class="punctuation bracket">[</span><span class="variable">offset</span><span class="punctuation special">..</span><span class="punctuation bracket">]</span><span class="punctuation bracket">[</span><span class="number">0</span><span class="punctuation special">..</span><span class="number">2</span><span class="punctuation bracket">]</span><span class="operator">.*</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expectEqual</span><span class="punctuation bracket">(</span><span class="variable">slice</span><span class="punctuation bracket">[</span><span class="variable">offset</span><span class="punctuation bracket">]</span><span class="punctuation delimiter">,</span> <span class="variable">vec2</span><span class="punctuation bracket">[</span><span class="number">0</span><span class="punctuation bracket">]</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expectEqual</span><span class="punctuation bracket">(</span><span class="variable">slice</span><span class="punctuation bracket">[</span><span class="variable">offset</span> <span class="operator">+</span> <span class="number">1</span><span class="punctuation bracket">]</span><span class="punctuation delimiter">,</span> <span class="variable">vec2</span><span class="punctuation bracket">[</span><span class="number">1</span><span class="punctuation bracket">]</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expectEqual</span><span class="punctuation bracket">(</span><span class="variable">vec2</span><span class="punctuation delimiter">,</span> <span class="variable">vec3</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>pointer</h3><ul><li>*T :ptr.*</li><li>[*]T :索引,切片,偏移.ptr[i],ptr[start..end],ptr + x,ptr - x</li><li>[]T :索引,切片,长度.array_ptr[i],array_ptr[start..end],array_ptr.len</li><li>*[N]T :索引,切片,长度.array_ptr[i],array_ptr[start..end],array_ptr.len  相当于数组的指针,.*解引用得数组,且可直接赋值给切片 try expect(@TypeOf(arr1[1..3]) == (*[2]f32));<br>try expect(@TypeOf(arr1[1..3].*) == ([2]f32));<br>try expect(@TypeOf(&arr1) == (*[4]f32));<br>var slice: []const f32 = &arr1;<br>var ptr: [*]const i32 = &array;<br>var ptr2: [*]const i32 = slice.ptr;</li></ul><pre><code class="zig"><span class="keyword function">fn</span> <span class="function">increment</span><span class="punctuation bracket">(</span><span class="parameter">num</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span> <span class="type builtin">void</span> <span class="punctuation bracket">{</span>
    <span class="variable">num</span><span class="operator">.*</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;pointers&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span> = <span class="number">1</span><span class="punctuation delimiter">;</span>
    <span class="variable">increment</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">x</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">x</span> <span class="operator">==</span> <span class="number">2</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@sizeOf</span><span class="punctuation bracket">(</span><span class="type builtin">usize</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="function builtin">@sizeOf</span><span class="punctuation bracket">(</span><span class="operator">*</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@sizeOf</span><span class="punctuation bracket">(</span><span class="type builtin">isize</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="function builtin">@sizeOf</span><span class="punctuation bracket">(</span><span class="operator">*</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;@intFromPtr and @ptrFromInt&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">ptr</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="type builtin">i32</span> = <span class="function builtin">@ptrFromInt</span><span class="punctuation bracket">(</span><span class="number">0xdeadbee0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">addr</span> = <span class="function builtin">@intFromPtr</span><span class="punctuation bracket">(</span><span class="variable">ptr</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">addr</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="type builtin">usize</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">addr</span> <span class="operator">==</span> <span class="number">0xdeadbee0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;allowzero&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">zero</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">ptr</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="type qualifier">allowzero</span> <span class="type builtin">i32</span> = <span class="function builtin">@ptrFromInt</span><span class="punctuation bracket">(</span><span class="variable">zero</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@intFromPtr</span><span class="punctuation bracket">(</span><span class="variable">ptr</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//[N:t]T, [:t]T, and [*:t]T, where t is a value of the child type T</span>
<span class="keyword">test</span> <span class="string">&quot;sentinel termination&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">terminated</span> = <span class="punctuation bracket">[</span><span class="number">3</span><span class="punctuation delimiter">:</span><span class="number">0</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span> <span class="number">3</span><span class="punctuation delimiter">,</span> <span class="number">2</span><span class="punctuation delimiter">,</span> <span class="number">1</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">terminated</span><span class="punctuation delimiter">.</span><span class="field">len</span> <span class="operator">==</span> <span class="number">3</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="operator">*</span><span class="type qualifier">const</span> <span class="punctuation bracket">[</span><span class="number">4</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="function builtin">@ptrCast</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">terminated</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation bracket">[</span><span class="number">3</span><span class="punctuation bracket">]</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;string literal&quot;</span> <span class="punctuation bracket">{</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="string">&quot;hello&quot;</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="operator">*</span><span class="type qualifier">const</span> <span class="punctuation bracket">[</span><span class="number">5</span><span class="punctuation delimiter">:</span><span class="number">0</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;C string&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">c_string</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="operator">*</span><span class="punctuation delimiter">:</span><span class="number">0</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span> = <span class="string">&quot;hello&quot;</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">x</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="operator">*</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span> = <span class="variable">c_string</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">x</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">array</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="number">5</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">i</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="repeat">while</span> <span class="punctuation bracket">(</span><span class="variable">c_string</span><span class="punctuation bracket">[</span><span class="variable">i</span><span class="punctuation bracket">]</span> <span class="operator">!=</span> <span class="number">0</span><span class="punctuation bracket">)</span> <span class="punctuation delimiter">:</span> <span class="punctuation bracket">(</span><span class="variable">i</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="variable">array</span><span class="punctuation bracket">[</span><span class="variable">i</span><span class="punctuation bracket">]</span> <span class="operator">=</span> <span class="variable">c_string</span><span class="punctuation bracket">[</span><span class="variable">i</span><span class="punctuation bracket">]</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;sentinel terminated slicing&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">x</span> = <span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation delimiter">:</span><span class="number">0</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span><span class="number">255</span><span class="punctuation bracket">}</span> <span class="operator">**</span> <span class="number">3</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">y</span> = <span class="variable">x</span><span class="punctuation bracket">[</span><span class="number">0</span><span class="punctuation special">..</span><span class="number">3</span> <span class="punctuation delimiter">:</span><span class="number">0</span><span class="punctuation bracket">]</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation bracket">[</span><span class="number">0</span><span class="punctuation bracket">]</span> <span class="operator">==</span> <span class="number">255</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation bracket">[</span><span class="number">3</span><span class="punctuation bracket">]</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">y</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>enum</h3><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">Value2</span> = <span class="keyword">enum</span><span class="punctuation bracket">(</span><span class="type builtin">u32</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
    <span class="variable">hundred</span> = <span class="number">100</span><span class="punctuation delimiter">,</span>
    <span class="variable">thousand</span> = <span class="number">1000</span><span class="punctuation delimiter">,</span>
    <span class="variable">million</span> = <span class="number">1000000</span><span class="punctuation delimiter">,</span>
    <span class="variable">next</span><span class="punctuation delimiter">,</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;set enum ordinal value&quot;</span> <span class="punctuation bracket">{</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@intFromEnum</span><span class="punctuation bracket">(</span><span class="variable">Value2</span><span class="punctuation delimiter">.</span><span class="field">hundred</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="number">100</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@intFromEnum</span><span class="punctuation bracket">(</span><span class="variable">Value2</span><span class="punctuation delimiter">.</span><span class="field">thousand</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="number">1000</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@intFromEnum</span><span class="punctuation bracket">(</span><span class="variable">Value2</span><span class="punctuation delimiter">.</span><span class="field">million</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="number">1000000</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@intFromEnum</span><span class="punctuation bracket">(</span><span class="variable">Value2</span><span class="punctuation delimiter">.</span><span class="field">next</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="number">1000001</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="type qualifier">const</span> <span class="variable">Suit</span> = <span class="keyword">enum</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">count</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="variable">clubs</span><span class="punctuation delimiter">,</span>
    <span class="variable">spades</span><span class="punctuation delimiter">,</span>
    <span class="variable">diamonds</span><span class="punctuation delimiter">,</span>
    <span class="variable">hearts</span><span class="punctuation delimiter">,</span>
    <span class="attribute">pub</span> <span class="keyword function">fn</span> <span class="function">isClubs</span><span class="punctuation bracket">(</span><span class="parameter">self</span><span class="punctuation delimiter">:</span> <span class="variable">Suit</span><span class="punctuation bracket">)</span> <span class="type builtin">bool</span> <span class="punctuation bracket">{</span>
        <span class="keyword return">return</span> <span class="variable">self</span> <span class="operator">==</span> <span class="variable">Suit</span><span class="punctuation delimiter">.</span><span class="field">clubs</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;enum method&quot;</span> <span class="punctuation bracket">{</span>
    <span class="variable">Suit</span><span class="punctuation delimiter">.</span><span class="field">count</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">Suit</span><span class="punctuation delimiter">.</span><span class="field">count</span> <span class="operator">==</span> <span class="number">1</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">Suit</span><span class="punctuation delimiter">.</span><span class="field">spades</span><span class="punctuation delimiter">.</span><span class="function">isClubs</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="variable">Suit</span><span class="punctuation delimiter">.</span><span class="function">isClubs</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="variable builtin">spades</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>struct</h3><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">Vec4</span> = <span class="keyword">struct</span> <span class="punctuation bracket">{</span> <span class="field">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">f32</span><span class="punctuation delimiter">,</span> <span class="field">y</span><span class="punctuation delimiter">:</span> <span class="type builtin">f32</span><span class="punctuation delimiter">,</span> <span class="field">z</span><span class="punctuation delimiter">:</span> <span class="type builtin">f32</span> = <span class="number">0</span><span class="punctuation delimiter">,</span> <span class="field">w</span><span class="punctuation delimiter">:</span> <span class="type builtin">f32</span> = <span class="constant builtin">undefined</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;struct defaults&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">my_vector</span> = <span class="variable">Vec4</span><span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="field">x</span> = <span class="number">25</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">y</span> = <span class="operator">-</span><span class="number">50</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">my_vector</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="type qualifier">const</span> <span class="variable">Stuff</span> = <span class="keyword">struct</span> <span class="punctuation bracket">{</span>
    <span class="field">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">i32</span><span class="punctuation delimiter">,</span>
    <span class="field">y</span><span class="punctuation delimiter">:</span> <span class="type builtin">i32</span><span class="punctuation delimiter">,</span>
    <span class="keyword function">fn</span> <span class="function">swap</span><span class="punctuation bracket">(</span><span class="parameter">self</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="variable">Stuff</span><span class="punctuation bracket">)</span> <span class="type builtin">void</span> <span class="punctuation bracket">{</span>
        <span class="type qualifier">const</span> <span class="variable">tmp</span> = <span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">x</span><span class="punctuation delimiter">;</span>
        <span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">x</span> <span class="operator">=</span> <span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">y</span><span class="punctuation delimiter">;</span>
        <span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">y</span> <span class="operator">=</span> <span class="variable">tmp</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;automatic dereference&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">thing</span> = <span class="variable">Stuff</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">x</span> = <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="field">y</span> = <span class="number">20</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="variable">thing</span><span class="punctuation delimiter">.</span><span class="function">swap</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">thing</span><span class="punctuation delimiter">.</span><span class="field">x</span> <span class="operator">==</span> <span class="number">20</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">thing</span><span class="punctuation delimiter">.</span><span class="field">y</span> <span class="operator">==</span> <span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;tuple&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">values</span> = <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span>
        <span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">u32</span><span class="punctuation delimiter">,</span> <span class="number">1234</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">,</span>
        <span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">f64</span><span class="punctuation delimiter">,</span> <span class="float">12.34</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">,</span>
        <span class="boolean">true</span><span class="punctuation delimiter">,</span>
        <span class="string">&quot;hi&quot;</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span> <span class="operator">++</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="boolean">false</span><span class="punctuation bracket">}</span> <span class="operator">**</span> <span class="number">2</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">values</span><span class="punctuation bracket">[</span><span class="number">0</span><span class="punctuation bracket">]</span> <span class="operator">==</span> <span class="number">1234</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">values</span><span class="punctuation bracket">[</span><span class="number">4</span><span class="punctuation bracket">]</span> <span class="operator">==</span> <span class="boolean">false</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="attribute">inline</span> <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="variable">values</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation special">..</span><span class="punctuation bracket">)</span> |<span class="variable">v</span><span class="punctuation delimiter">,</span> <span class="variable">i</span>| <span class="punctuation bracket">{</span>
        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">i</span> <span class="operator">!=</span> <span class="number">2</span><span class="punctuation bracket">)</span> <span class="repeat">continue</span><span class="punctuation delimiter">;</span>
        <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">v</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">values</span><span class="punctuation delimiter">.</span><span class="field">len</span> <span class="operator">==</span> <span class="number">6</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">values</span><span class="punctuation delimiter">.</span><span class="field">@&quot;3&quot;</span><span class="punctuation bracket">[</span><span class="number">0</span><span class="punctuation bracket">]</span> <span class="operator">==</span> <span class="character">&apos;h&apos;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>union</h3><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">Tag</span> = <span class="keyword">enum</span> <span class="punctuation bracket">{</span> <span class="variable">a</span><span class="punctuation delimiter">,</span> <span class="variable">b</span><span class="punctuation delimiter">,</span> <span class="variable">c</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="type qualifier">const</span> <span class="variable">Tagged</span> = <span class="keyword">union</span><span class="punctuation bracket">(</span><span class="variable">Tag</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span> <span class="constant">a</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="constant">b</span><span class="punctuation delimiter">:</span> <span class="type builtin">f32</span><span class="punctuation delimiter">,</span> <span class="constant">c</span><span class="punctuation delimiter">:</span> <span class="type builtin">bool</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;switch on tagged union&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">value</span> = <span class="variable">Tagged</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">b</span> = <span class="float">1.5</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="conditional">switch</span> <span class="punctuation bracket">(</span><span class="variable">value</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="variable builtin">a</span> =&gt; <span class="punctuation bracket">|*byte|</span> <span class="variable">byte</span><span class="operator">.*</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="variable builtin">b</span> =&gt; <span class="punctuation bracket">|*float|</span> <span class="variable">float</span><span class="operator">.*</span> <span class="operator">*=</span> <span class="number">2</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="variable builtin">c</span> =&gt; <span class="punctuation bracket">|*b|</span> <span class="variable">b</span><span class="operator">.*</span> <span class="operator">=</span> <span class="operator">!</span><span class="variable">b</span><span class="operator">.*</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">value</span><span class="punctuation delimiter">.</span><span class="field">b</span> <span class="operator">==</span> <span class="number">3</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
<span class="type qualifier">const</span> <span class="variable">Tagged2</span> = <span class="keyword">union</span><span class="punctuation bracket">(</span><span class="keyword">enum</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span> <span class="constant">a</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="constant">b</span><span class="punctuation delimiter">:</span> <span class="type builtin">f32</span><span class="punctuation delimiter">,</span> <span class="constant">c</span><span class="punctuation delimiter">:</span> <span class="type builtin">bool</span><span class="punctuation delimiter">,</span> <span class="variable">none</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
</code></pre>
<h3>opaque</h3><p>The typical usecase of opaque is to maintain type safety when interoperating with C code that does not expose complete type information.</p><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">Window</span> = <span class="keyword">opaque</span> <span class="punctuation bracket">{</span>
    <span class="keyword function">fn</span> <span class="function">show</span><span class="punctuation bracket">(</span><span class="parameter">self</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="variable">Window</span><span class="punctuation bracket">)</span> <span class="type builtin">void</span> <span class="punctuation bracket">{</span>
        <span class="variable">show_window</span><span class="punctuation bracket">(</span><span class="variable">self</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="attribute">extern</span> <span class="keyword function">fn</span> <span class="function">show_window</span><span class="punctuation bracket">(</span><span class="operator">*</span><span class="variable">Window</span><span class="punctuation bracket">)</span> <span class="storageclass">callconv</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="variable builtin">C</span><span class="punctuation bracket">)</span> <span class="type builtin">void</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;opaque with declarations&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">main_window</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="variable">Window</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>
    <span class="variable">main_window</span><span class="punctuation delimiter">.</span><span class="function">show</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>Integer Rules ?提升(自动)</h3><p>Overflows are detectable illegal behaviour,Zig provides overflow operators.</p><ul><li>+%=</li><li>-%=</li><li>*%=</li></ul><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">binary_mask</span><span class="punctuation delimiter">:</span> <span class="type builtin">u64</span> = <span class="number">0b1_1111_1111</span><span class="punctuation delimiter">;</span>
<span class="keyword">test</span> <span class="string">&quot;integer widening&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">a</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span> = <span class="number">250</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">b</span><span class="punctuation delimiter">:</span> <span class="type builtin">u16</span> = <span class="variable">a</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">c</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="variable">b</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">c</span> <span class="operator">==</span> <span class="variable">a</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
<span class="keyword">test</span> <span class="string">&quot;@intCast&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">u64</span> = <span class="number">200</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">y</span> = <span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="function builtin">@intCast</span><span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">y</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
<span class="keyword">test</span> <span class="string">&quot;well defined overflow&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">a</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span> = <span class="number">255</span><span class="punctuation delimiter">;</span>
    <span class="variable">a</span> <span class="operator">+%=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">a</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>float ?提升</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;float widening&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">a</span><span class="punctuation delimiter">:</span> <span class="type builtin">f16</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">b</span><span class="punctuation delimiter">:</span> <span class="type builtin">f32</span> = <span class="variable">a</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">c</span><span class="punctuation delimiter">:</span> <span class="type builtin">f128</span> = <span class="variable">b</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">c</span> <span class="operator">==</span> <span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">f128</span><span class="punctuation delimiter">,</span> <span class="variable">a</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="type qualifier">const</span> <span class="variable">another_float</span> = <span class="float">123.0</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">yet_another</span> = <span class="float">123.0e+77</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">inf</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">math</span><span class="punctuation delimiter">.</span><span class="function">inf</span><span class="punctuation bracket">(</span><span class="type builtin">f32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">negative_inf</span> = <span class="operator">-</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">math</span><span class="punctuation delimiter">.</span><span class="function">inf</span><span class="punctuation bracket">(</span><span class="type builtin">f64</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">nan</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">math</span><span class="punctuation delimiter">.</span><span class="function">nan</span><span class="punctuation bracket">(</span><span class="type builtin">f128</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;int-float conversion&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">a</span><span class="punctuation delimiter">:</span> <span class="type builtin">i32</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">b</span> = <span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">f32</span><span class="punctuation delimiter">,</span> <span class="function builtin">@floatFromInt</span><span class="punctuation bracket">(</span><span class="variable">a</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span> <span class="comment">//safe</span>
    <span class="type qualifier">const</span> <span class="variable">c</span> = <span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">i32</span><span class="punctuation delimiter">,</span> <span class="function builtin">@intFromFloat</span><span class="punctuation bracket">(</span><span class="variable">b</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span> <span class="comment">//detectable illegal behaviour</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">c</span> <span class="operator">==</span> <span class="variable">a</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>comptime</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;comptime blocks&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">x</span> = <span class="attribute">comptime</span> <span class="variable">fibonacci</span><span class="punctuation bracket">(</span><span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">x</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">y</span> = <span class="attribute">comptime</span> <span class="label">blk</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">{</span>
        <span class="repeat">break</span> <span class="punctuation delimiter">:</span><span class="label">blk</span> <span class="variable">fibonacci</span><span class="punctuation bracket">(</span><span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">y</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//comptime_int values coerce to any integer type that can hold them. They also coerce to floats. Character literals are of this type</span>
<span class="keyword">test</span> <span class="string">&quot;comptime_int&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">a</span> = <span class="number">12</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">b</span> = <span class="variable">a</span> <span class="operator">+</span> <span class="number">10</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">c</span><span class="punctuation delimiter">:</span> <span class="type builtin">u4</span> = <span class="variable">a</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">c</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">d</span><span class="punctuation delimiter">:</span> <span class="type builtin">f32</span> = <span class="variable">b</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">d</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
<span class="comment">//comptime_float is also available, which internally is an f128. These cannot be coerced to integers, even if they hold an integer value.</span>

<span class="comment">//array:++,** also comptime</span>

<span class="comment">//We can use the @Type function to create a type from a @typeInfo</span>
<span class="keyword function">fn</span> <span class="function">GetBiggerInt</span><span class="punctuation bracket">(</span><span class="attribute">comptime</span> <span class="parameter">T</span><span class="punctuation delimiter">:</span> <span class="type builtin">type</span><span class="punctuation bracket">)</span> <span class="type builtin">type</span> <span class="punctuation bracket">{</span>
    <span class="keyword return">return</span> <span class="function builtin">@Type</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="field">Int</span> = <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span>
            <span class="punctuation delimiter">.</span><span class="field">bits</span> = <span class="function builtin">@typeInfo</span><span class="punctuation bracket">(</span><span class="variable">T</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">Int</span><span class="punctuation delimiter">.</span><span class="field">bits</span> <span class="operator">+</span> <span class="number">1</span><span class="punctuation delimiter">,</span>
            <span class="punctuation delimiter">.</span><span class="field">signedness</span> = <span class="function builtin">@typeInfo</span><span class="punctuation bracket">(</span><span class="variable">T</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">Int</span><span class="punctuation delimiter">.</span><span class="field">signedness</span><span class="punctuation delimiter">,</span>
        <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;@Type&quot;</span> <span class="punctuation bracket">{</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">GetBiggerInt</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="type builtin">u9</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">GetBiggerInt</span><span class="punctuation bracket">(</span><span class="type builtin">i31</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="type builtin">i32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>optional ?T:null or value of T</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;orelse&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">a</span><span class="punctuation delimiter">:</span> <span class="operator">?</span><span class="type builtin">f32</span> = <span class="constant builtin">null</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">b</span> = <span class="variable">a</span> <span class="operator">orelse</span> <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">b</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">b</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="type builtin">f32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;orelse unreachable&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">a</span><span class="punctuation delimiter">:</span> <span class="operator">?</span><span class="type builtin">f32</span> = <span class="number">5</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">b</span> = <span class="variable">a</span> <span class="operator">orelse</span> <span class="constant builtin">unreachable</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">c</span> = <span class="variable">a</span><span class="operator">.?</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">b</span> <span class="operator">==</span> <span class="variable">c</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">c</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="type builtin">f32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//we can “capture” its non-null value;有捕获才能做条件,否则x!=null</span>
<span class="keyword">test</span> <span class="string">&quot;if optional payload capture&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">a</span><span class="punctuation delimiter">:</span> <span class="operator">?</span><span class="type builtin">i32</span> = <span class="number">5</span><span class="punctuation delimiter">;</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">a</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">|_|</span> <span class="punctuation bracket">{</span> <span class="comment">//if (a != null) {</span>
        <span class="type qualifier">const</span> <span class="variable">value</span> = <span class="variable">a</span><span class="operator">.?</span><span class="punctuation delimiter">;</span>
        <span class="variable">_</span> <span class="operator">=</span> <span class="variable">value</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="type qualifier">var</span> <span class="variable">b</span><span class="punctuation delimiter">:</span> <span class="operator">?</span><span class="type builtin">i32</span> = <span class="number">5</span><span class="punctuation delimiter">;</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">b</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">|*value|</span> <span class="punctuation bracket">{</span>
        <span class="variable">value</span><span class="operator">.*</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">b</span><span class="operator">.?</span> <span class="operator">==</span> <span class="number">6</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>payload capture</h3><p>for value<br>option<br>error union<br>switch union</p><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;for capture&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">x</span> = <span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">i8</span><span class="punctuation bracket">{</span> <span class="number">1</span><span class="punctuation delimiter">,</span> <span class="number">5</span><span class="punctuation delimiter">,</span> <span class="number">120</span><span class="punctuation delimiter">,</span> <span class="operator">-</span><span class="number">5</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation bracket">)</span> |<span class="variable">v</span>| <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">v</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="type builtin">i8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
<span class="keyword">test</span> <span class="string">&quot;for with pointer capture&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">data</span> = <span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span> <span class="number">1</span><span class="punctuation delimiter">,</span> <span class="number">2</span><span class="punctuation delimiter">,</span> <span class="number">3</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">data</span><span class="punctuation bracket">)</span> |<span class="operator">*</span><span class="variable">byte</span>| <span class="variable">byte</span><span class="operator">.*</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">mem</span><span class="punctuation delimiter">.</span><span class="function">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="operator">&amp;</span><span class="variable">data</span><span class="punctuation delimiter">,</span> <span class="operator">&amp;</span><span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span> <span class="number">2</span><span class="punctuation delimiter">,</span> <span class="number">3</span><span class="punctuation delimiter">,</span> <span class="number">4</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//optional-if</span>

<span class="comment">//error union if</span>
<span class="keyword">test</span> <span class="string">&quot;error union if&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">ent_num</span><span class="punctuation delimiter">:</span> <span class="keyword">error</span><span class="punctuation bracket">{</span><span class="variable builtin">UnknownEntity</span><span class="punctuation bracket">}</span><span class="exception">!</span><span class="type builtin">u32</span> = <span class="number">5</span><span class="punctuation delimiter">;</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">ent_num</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">|entity|</span> <span class="punctuation bracket">{</span>
        <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">entity</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="type builtin">u32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">entity</span> <span class="operator">==</span> <span class="number">5</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span> <span class="conditional">else</span> <span class="punctuation bracket">|err|</span> <span class="punctuation bracket">{</span>
        <span class="variable">_</span> <span class="operator">=</span> <span class="variable">err</span> <span class="operator">catch</span> <span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
        <span class="constant builtin">unreachable</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span>

<span class="comment">//while</span>
<span class="type qualifier">var</span> <span class="variable">numbers_left2</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>

<span class="keyword function">fn</span> <span class="function">eventuallyErrorSequence</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="exception">!</span><span class="type builtin">u32</span> <span class="punctuation bracket">{</span>
    <span class="keyword return">return</span> <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">numbers_left2</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation bracket">)</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">ReachedZero</span> <span class="conditional">else</span> <span class="label">blk</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">{</span>
        <span class="variable">numbers_left2</span> <span class="operator">-=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
        <span class="repeat">break</span> <span class="punctuation delimiter">:</span><span class="label">blk</span> <span class="variable">numbers_left2</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;while error union capture&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">sum</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="variable">numbers_left2</span> <span class="operator">=</span> <span class="number">3</span><span class="punctuation delimiter">;</span>
    <span class="repeat">while</span> <span class="punctuation bracket">(</span><span class="variable">eventuallyErrorSequence</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">|value|</span> <span class="punctuation bracket">{</span>
        <span class="variable">sum</span> <span class="operator">+=</span> <span class="variable">value</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span> <span class="conditional">else</span> <span class="punctuation bracket">|err|</span> <span class="punctuation bracket">{</span>
        <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">err</span> <span class="operator">==</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">ReachedZero</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span>

<span class="comment">//switch</span>
<span class="type qualifier">const</span> <span class="variable">Info</span> = <span class="keyword">union</span><span class="punctuation bracket">(</span><span class="keyword">enum</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
    <span class="constant">a</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span><span class="punctuation delimiter">,</span>
    <span class="constant">b</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span>
    <span class="variable">c</span><span class="punctuation delimiter">,</span>
    <span class="constant">d</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span><span class="punctuation delimiter">,</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;switch capture&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">b</span> = <span class="variable">Info</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">a</span> = <span class="number">10</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">x</span> = <span class="conditional">switch</span> <span class="punctuation bracket">(</span><span class="variable">b</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="variable builtin">b</span> =&gt; <span class="punctuation bracket">|str|</span> <span class="label">blk</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">{</span>
            <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">str</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="repeat">break</span> <span class="punctuation delimiter">:</span><span class="label">blk</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
        <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="variable builtin">c</span> =&gt; <span class="number">2</span><span class="punctuation delimiter">,</span>
        <span class="comment">//if these are of the same type, they</span>
        <span class="comment">//may be inside the same capture group</span>
        <span class="punctuation delimiter">.</span><span class="variable builtin">a</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="variable builtin">d</span> =&gt; <span class="punctuation bracket">|num|</span> <span class="label">blk</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">{</span>
            <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">num</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="type builtin">u32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="repeat">break</span> <span class="punctuation delimiter">:</span><span class="label">blk</span> <span class="variable">num</span> <span class="operator">*</span> <span class="number">2</span><span class="punctuation delimiter">;</span>
        <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">x</span> <span class="operator">==</span> <span class="number">20</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h2>标准模式</h2><h3>allocator</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;allocation&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">allocator</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">heap</span><span class="punctuation delimiter">.</span><span class="field">page_allocator</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">memory</span> = <span class="operator">try</span> <span class="variable">allocator</span><span class="punctuation delimiter">.</span><span class="function">alloc</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="number">100</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">allocator</span><span class="punctuation delimiter">.</span><span class="function">free</span><span class="punctuation bracket">(</span><span class="variable">memory</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">memory</span><span class="punctuation delimiter">.</span><span class="field">len</span> <span class="operator">==</span> <span class="number">100</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">memory</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
<span class="keyword">test</span> <span class="string">&quot;allocator create/destroy&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">byte</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">heap</span><span class="punctuation delimiter">.</span><span class="field">page_allocator</span><span class="punctuation delimiter">.</span><span class="function">create</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">heap</span><span class="punctuation delimiter">.</span><span class="field">page_allocator</span><span class="punctuation delimiter">.</span><span class="function">destroy</span><span class="punctuation bracket">(</span><span class="variable">byte</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">byte</span><span class="operator">.*</span> <span class="operator">=</span> <span class="number">128</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;fixed buffer allocator&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">buffer</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="number">1000</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">fba</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">heap</span><span class="punctuation delimiter">.</span><span class="field">FixedBufferAllocator</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">buffer</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">allocator</span> = <span class="variable">fba</span><span class="punctuation delimiter">.</span><span class="function">allocator</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">memory</span> = <span class="operator">try</span> <span class="variable">allocator</span><span class="punctuation delimiter">.</span><span class="function">alloc</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="number">100</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">allocator</span><span class="punctuation delimiter">.</span><span class="function">free</span><span class="punctuation bracket">(</span><span class="variable">memory</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">memory</span><span class="punctuation delimiter">.</span><span class="field">len</span> <span class="operator">==</span> <span class="number">100</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">memory</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//可多次分配,一次释放</span>
<span class="keyword">test</span> <span class="string">&quot;arena allocator&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">arena</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">heap</span><span class="punctuation delimiter">.</span><span class="field">ArenaAllocator</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">heap</span><span class="punctuation delimiter">.</span><span class="field">page_allocator</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">arena</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">allocator</span> = <span class="variable">arena</span><span class="punctuation delimiter">.</span><span class="function">allocator</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">allocator</span><span class="punctuation delimiter">.</span><span class="function">alloc</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="number">1</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">allocator</span><span class="punctuation delimiter">.</span><span class="function">alloc</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">allocator</span><span class="punctuation delimiter">.</span><span class="function">alloc</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="number">100</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//This is a safe allocator which can prevent double-free, use-after-free and can detect leaks. Safety checks and thread safety can be turned off via its configuration struct (left empty below).</span>
<span class="keyword">test</span> <span class="string">&quot;GPA&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">gpa</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">heap</span><span class="punctuation delimiter">.</span><span class="function">GeneralPurposeAllocator</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span><span class="comment">//init,deinit;allocator:alloc,free</span>
    <span class="type qualifier">const</span> <span class="variable">allocator</span> = <span class="variable">gpa</span><span class="punctuation delimiter">.</span><span class="function">allocator</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="punctuation bracket">{</span>
        <span class="type qualifier">const</span> <span class="variable">deinit_status</span> = <span class="variable">gpa</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="comment">//fail test; can&apos;t try in defer as defer is executed after we return</span>
        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">deinit_status</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">leak</span><span class="punctuation bracket">)</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="boolean">false</span><span class="punctuation bracket">)</span> <span class="operator">catch</span> <span class="function builtin">@panic</span><span class="punctuation bracket">(</span><span class="string">&quot;TEST FAIL&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="type qualifier">const</span> <span class="variable">bytes</span> = <span class="operator">try</span> <span class="variable">allocator</span><span class="punctuation delimiter">.</span><span class="function">alloc</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="number">100</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">allocator</span><span class="punctuation delimiter">.</span><span class="function">free</span><span class="punctuation bracket">(</span><span class="variable">bytes</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//For high performance (but very few safety features!), std.heap.c_allocator</span>
</code></pre>
<h3>ArrayList</h3><p>std.ArrayList(T) is similar to C++’s std::vector<T></p><pre><code class="zig"><span class="comment">//try list.append(&apos;o&apos;);</span>
<span class="comment">//try list.appendSlice(&quot; World!&quot;);</span>
<span class="comment">//open = stack.pop()</span>

<span class="type qualifier">const</span> <span class="variable">eql</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">mem</span><span class="punctuation delimiter">.</span><span class="field">eql</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">ArrayList</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">ArrayList</span><span class="punctuation delimiter">;</span>
<span class="comment">//const test_allocator = std.testing.allocator;</span>

<span class="keyword">test</span> <span class="string">&quot;arraylist&quot;</span> <span class="punctuation bracket">{</span>
    <span class="comment">//var list = ArrayList(u8).init(test_allocator);</span>
    <span class="type qualifier">var</span> <span class="variable">gpa</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">heap</span><span class="punctuation delimiter">.</span><span class="function">GeneralPurposeAllocator</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="punctuation bracket">{</span>
        <span class="type qualifier">const</span> <span class="variable">deinit_status</span> = <span class="variable">gpa</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">deinit_status</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">leak</span><span class="punctuation bracket">)</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="boolean">false</span><span class="punctuation bracket">)</span> <span class="operator">catch</span> <span class="function builtin">@panic</span><span class="punctuation bracket">(</span><span class="string">&quot;TEST FAIL&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
    <span class="type qualifier">const</span> <span class="variable">allocator</span> = <span class="variable">gpa</span><span class="punctuation delimiter">.</span><span class="function">allocator</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">list</span> = <span class="variable">ArrayList</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span><span class="variable">allocator</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="character">&apos;H&apos;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="character">&apos;e&apos;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="character">&apos;l&apos;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="character">&apos;l&apos;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="character">&apos;o&apos;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="function">appendSlice</span><span class="punctuation bracket">(</span><span class="string">&quot; World!&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="field">items</span><span class="punctuation delimiter">,</span> <span class="string">&quot;Hello World!&quot;</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;stack&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">string</span> = <span class="string">&quot;(()())&quot;</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">stack</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="function">ArrayList</span><span class="punctuation bracket">(</span><span class="type builtin">usize</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span>
        <span class="variable">test_allocator</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">stack</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">Pair</span> = <span class="keyword">struct</span> <span class="punctuation bracket">{</span> <span class="field">open</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span><span class="punctuation delimiter">,</span> <span class="field">close</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">pairs</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="function">ArrayList</span><span class="punctuation bracket">(</span><span class="variable">Pair</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span>
        <span class="variable">test_allocator</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">pairs</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="variable">string</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation special">..</span><span class="punctuation bracket">)</span> |<span class="variable">char</span><span class="punctuation delimiter">,</span> <span class="variable">i</span>| <span class="punctuation bracket">{</span>
        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">char</span> <span class="operator">==</span> <span class="character">&apos;(&apos;</span><span class="punctuation bracket">)</span> <span class="operator">try</span> <span class="variable">stack</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="variable">i</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">char</span> <span class="operator">==</span> <span class="character">&apos;)&apos;</span><span class="punctuation bracket">)</span>
            <span class="operator">try</span> <span class="variable">pairs</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span>
                <span class="punctuation delimiter">.</span><span class="field">open</span> = <span class="variable">stack</span><span class="punctuation delimiter">.</span><span class="function">pop</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">,</span>
                <span class="punctuation delimiter">.</span><span class="field">close</span> = <span class="variable">i</span><span class="punctuation delimiter">,</span>
            <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="variable">pairs</span><span class="punctuation delimiter">.</span><span class="field">items</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation special">..</span><span class="punctuation bracket">)</span> |<span class="variable">pair</span><span class="punctuation delimiter">,</span> <span class="variable">i</span>| <span class="punctuation bracket">{</span>
        <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">meta</span><span class="punctuation delimiter">.</span><span class="function">eql</span><span class="punctuation bracket">(</span><span class="variable">pair</span><span class="punctuation delimiter">,</span> <span class="conditional">switch</span> <span class="punctuation bracket">(</span><span class="variable">i</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
            <span class="number">0</span> =&gt; <span class="variable">Pair</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">open</span> = <span class="number">1</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="field">close</span> = <span class="number">2</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
            <span class="number">1</span> =&gt; <span class="variable">Pair</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">open</span> = <span class="number">3</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="field">close</span> = <span class="number">4</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
            <span class="number">2</span> =&gt; <span class="variable">Pair</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">open</span> = <span class="number">0</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="field">close</span> = <span class="number">5</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
            <span class="conditional">else</span> =&gt; <span class="constant builtin">unreachable</span><span class="punctuation delimiter">,</span>
        <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>HashMap</h3><pre><code class="zig"><span class="comment">//m.put(k,v)</span>
<span class="comment">//const old = try map.fetchPut(255, 100);</span>
<span class="comment">//try expect(map.get(255).? == 100);</span>
<span class="keyword">test</span> <span class="string">&quot;hashing&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">Point</span> = <span class="keyword">struct</span> <span class="punctuation bracket">{</span> <span class="field">x</span><span class="punctuation delimiter">:</span> <span class="type builtin">i32</span><span class="punctuation delimiter">,</span> <span class="field">y</span><span class="punctuation delimiter">:</span> <span class="type builtin">i32</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">map</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="function">AutoHashMap</span><span class="punctuation bracket">(</span><span class="type builtin">u32</span><span class="punctuation delimiter">,</span> <span class="variable">Point</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span>
        <span class="variable">test_allocator</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">put</span><span class="punctuation bracket">(</span><span class="number">1525</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">x</span> = <span class="number">1</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="field">y</span> = <span class="operator">-</span><span class="number">4</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">put</span><span class="punctuation bracket">(</span><span class="number">1550</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">x</span> = <span class="number">2</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="field">y</span> = <span class="operator">-</span><span class="number">3</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">put</span><span class="punctuation bracket">(</span><span class="number">1575</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">x</span> = <span class="number">3</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="field">y</span> = <span class="operator">-</span><span class="number">2</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">put</span><span class="punctuation bracket">(</span><span class="number">1600</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">x</span> = <span class="number">4</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="field">y</span> = <span class="operator">-</span><span class="number">1</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">count</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="number">4</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">sum</span> = <span class="variable">Point</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">x</span> = <span class="number">0</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="field">y</span> = <span class="number">0</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">iterator</span> = <span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">iterator</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="repeat">while</span> <span class="punctuation bracket">(</span><span class="variable">iterator</span><span class="punctuation delimiter">.</span><span class="function">next</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">|entry|</span> <span class="punctuation bracket">{</span>
        <span class="variable">sum</span><span class="punctuation delimiter">.</span><span class="field">x</span> <span class="operator">+=</span> <span class="variable">entry</span><span class="punctuation delimiter">.</span><span class="field">value_ptr</span><span class="punctuation delimiter">.</span><span class="field">x</span><span class="punctuation delimiter">;</span>
        <span class="variable">sum</span><span class="punctuation delimiter">.</span><span class="field">y</span> <span class="operator">+=</span> <span class="variable">entry</span><span class="punctuation delimiter">.</span><span class="field">value_ptr</span><span class="punctuation delimiter">.</span><span class="field">y</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">sum</span><span class="punctuation delimiter">.</span><span class="field">x</span> <span class="operator">==</span> <span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">sum</span><span class="punctuation delimiter">.</span><span class="field">y</span> <span class="operator">==</span> <span class="operator">-</span><span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;fetchPut&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">map</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="function">AutoHashMap</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="type builtin">f32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span>
        <span class="variable">test_allocator</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">put</span><span class="punctuation bracket">(</span><span class="number">255</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">old</span> = <span class="operator">try</span> <span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">fetchPut</span><span class="punctuation bracket">(</span><span class="number">255</span><span class="punctuation delimiter">,</span> <span class="number">100</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">old</span><span class="operator">.?</span><span class="punctuation delimiter">.</span><span class="field">value</span> <span class="operator">==</span> <span class="number">10</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">map</span><span class="punctuation delimiter">.</span><span class="function">get</span><span class="punctuation bracket">(</span><span class="number">255</span><span class="punctuation bracket">)</span><span class="operator">.?</span> <span class="operator">==</span> <span class="number">100</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>以下了解即可,随用随取</h3><h3>std.mem.sort</h3><p>std.sort.sort has a best case of O(n), and an average and worst case of O(n*log(n)).</p><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;sorting&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">data</span> = <span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span> <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="number">240</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="number">5</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">mem</span><span class="punctuation delimiter">.</span><span class="function">sort</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="operator">&amp;</span><span class="variable">data</span><span class="punctuation delimiter">,</span> <span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span> <span class="attribute">comptime</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">sort</span><span class="punctuation delimiter">.</span><span class="function">asc</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="operator">&amp;</span><span class="variable">data</span><span class="punctuation delimiter">,</span> <span class="operator">&amp;</span><span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span> <span class="number">0</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation delimiter">,</span> <span class="number">5</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="number">240</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">mem</span><span class="punctuation delimiter">.</span><span class="function">sort</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="operator">&amp;</span><span class="variable">data</span><span class="punctuation delimiter">,</span> <span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span> <span class="attribute">comptime</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">sort</span><span class="punctuation delimiter">.</span><span class="function">desc</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="operator">&amp;</span><span class="variable">data</span><span class="punctuation delimiter">,</span> <span class="operator">&amp;</span><span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span> <span class="number">240</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="number">10</span><span class="punctuation delimiter">,</span> <span class="number">5</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation delimiter">,</span> <span class="number">0</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>iterator</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;split iterator&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">text</span> = <span class="string">&quot;robust, optimal, reusable, maintainable, &quot;</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">iter</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">mem</span><span class="punctuation delimiter">.</span><span class="function">split</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">text</span><span class="punctuation delimiter">,</span> <span class="string">&quot;, &quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">iter</span><span class="punctuation delimiter">.</span><span class="function">next</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="operator">.?</span><span class="punctuation delimiter">,</span> <span class="string">&quot;robust&quot;</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">iter</span><span class="punctuation delimiter">.</span><span class="function">next</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="operator">.?</span><span class="punctuation delimiter">,</span> <span class="string">&quot;optimal&quot;</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">iter</span><span class="punctuation delimiter">.</span><span class="function">next</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="operator">.?</span><span class="punctuation delimiter">,</span> <span class="string">&quot;reusable&quot;</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">iter</span><span class="punctuation delimiter">.</span><span class="function">next</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="operator">.?</span><span class="punctuation delimiter">,</span> <span class="string">&quot;maintainable&quot;</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">iter</span><span class="punctuation delimiter">.</span><span class="function">next</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="operator">.?</span><span class="punctuation delimiter">,</span> <span class="string">&quot;&quot;</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">iter</span><span class="punctuation delimiter">.</span><span class="function">next</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="constant builtin">null</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;iterator looping&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">iter</span> = <span class="punctuation bracket">(</span><span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">fs</span><span class="punctuation delimiter">.</span><span class="function">cwd</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">openIterableDir</span><span class="punctuation bracket">(</span>
        <span class="string">&quot;.&quot;</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">iterate</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">file_count</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="repeat">while</span> <span class="punctuation bracket">(</span><span class="operator">try</span> <span class="variable">iter</span><span class="punctuation delimiter">.</span><span class="function">next</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">|entry|</span> <span class="punctuation bracket">{</span>
        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">entry</span><span class="punctuation delimiter">.</span><span class="field">kind</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">file</span><span class="punctuation bracket">)</span> <span class="variable">file_count</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">file_count</span> <span class="operator">&gt;</span> <span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">//try to implement a custom iterator</span>
</code></pre>
<h3>Filesystem</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;createFile, write, seekTo, read&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">file</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">fs</span><span class="punctuation delimiter">.</span><span class="function">cwd</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">createFile</span><span class="punctuation bracket">(</span>
        <span class="string">&quot;junk_file.txt&quot;</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">read</span> = <span class="boolean">true</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">file</span><span class="punctuation delimiter">.</span><span class="function">close</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">bytes_written</span> = <span class="operator">try</span> <span class="variable">file</span><span class="punctuation delimiter">.</span><span class="function">writeAll</span><span class="punctuation bracket">(</span><span class="string">&quot;Hello File!&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">bytes_written</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">buffer</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="number">100</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">file</span><span class="punctuation delimiter">.</span><span class="function">seekTo</span><span class="punctuation bracket">(</span><span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">bytes_read</span> = <span class="operator">try</span> <span class="variable">file</span><span class="punctuation delimiter">.</span><span class="function">readAll</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">buffer</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">buffer</span><span class="punctuation bracket">[</span><span class="number">0</span><span class="punctuation special">..</span><span class="variable">bytes_read</span><span class="punctuation bracket">]</span><span class="punctuation delimiter">,</span> <span class="string">&quot;Hello File!&quot;</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;file stat&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">file</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">fs</span><span class="punctuation delimiter">.</span><span class="function">cwd</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">createFile</span><span class="punctuation bracket">(</span>
        <span class="string">&quot;junk_file2.txt&quot;</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">read</span> = <span class="boolean">true</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">file</span><span class="punctuation delimiter">.</span><span class="function">close</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">stat</span> = <span class="operator">try</span> <span class="variable">file</span><span class="punctuation delimiter">.</span><span class="function">stat</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">stat</span><span class="punctuation delimiter">.</span><span class="field">size</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">stat</span><span class="punctuation delimiter">.</span><span class="field">kind</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">file</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">stat</span><span class="punctuation delimiter">.</span><span class="field">ctime</span> <span class="operator">&lt;=</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">time</span><span class="punctuation delimiter">.</span><span class="function">nanoTimestamp</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">stat</span><span class="punctuation delimiter">.</span><span class="field">mtime</span> <span class="operator">&lt;=</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">time</span><span class="punctuation delimiter">.</span><span class="function">nanoTimestamp</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">stat</span><span class="punctuation delimiter">.</span><span class="field">atime</span> <span class="operator">&lt;=</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">time</span><span class="punctuation delimiter">.</span><span class="function">nanoTimestamp</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;make dir&quot;</span> <span class="punctuation bracket">{</span>
    <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">fs</span><span class="punctuation delimiter">.</span><span class="function">cwd</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">makeDir</span><span class="punctuation bracket">(</span><span class="string">&quot;test-tmp&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">iter_dir</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">fs</span><span class="punctuation delimiter">.</span><span class="function">cwd</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">openIterableDir</span><span class="punctuation bracket">(</span>
        <span class="string">&quot;test-tmp&quot;</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="punctuation bracket">{</span>
        <span class="variable">iter_dir</span><span class="punctuation delimiter">.</span><span class="function">close</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">fs</span><span class="punctuation delimiter">.</span><span class="function">cwd</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">deleteTree</span><span class="punctuation bracket">(</span><span class="string">&quot;test-tmp&quot;</span><span class="punctuation bracket">)</span> <span class="operator">catch</span> <span class="constant builtin">unreachable</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">iter_dir</span><span class="punctuation delimiter">.</span><span class="field">dir</span><span class="punctuation delimiter">.</span><span class="function">createFile</span><span class="punctuation bracket">(</span><span class="string">&quot;x&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">iter_dir</span><span class="punctuation delimiter">.</span><span class="field">dir</span><span class="punctuation delimiter">.</span><span class="function">createFile</span><span class="punctuation bracket">(</span><span class="string">&quot;y&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">iter_dir</span><span class="punctuation delimiter">.</span><span class="field">dir</span><span class="punctuation delimiter">.</span><span class="function">createFile</span><span class="punctuation bracket">(</span><span class="string">&quot;z&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">file_count</span><span class="punctuation delimiter">:</span> <span class="type builtin">usize</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">iter</span> = <span class="variable">iter_dir</span><span class="punctuation delimiter">.</span><span class="function">iterate</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="repeat">while</span> <span class="punctuation bracket">(</span><span class="operator">try</span> <span class="variable">iter</span><span class="punctuation delimiter">.</span><span class="function">next</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">|entry|</span> <span class="punctuation bracket">{</span>
        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">entry</span><span class="punctuation delimiter">.</span><span class="field">kind</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">file</span><span class="punctuation bracket">)</span> <span class="variable">file_count</span> <span class="operator">+=</span> <span class="number">1</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">file_count</span> <span class="operator">==</span> <span class="number">3</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>json</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;json parse&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">parsed</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">json</span><span class="punctuation delimiter">.</span><span class="function">parseFromSlice</span><span class="punctuation bracket">(</span>
        <span class="variable">Place</span><span class="punctuation delimiter">,</span>
        <span class="variable">test_allocator</span><span class="punctuation delimiter">,</span>
        <span class="string">\\{ &quot;lat&quot;: 40.684540, &quot;long&quot;: -74.401422 }</span>
    <span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">parsed</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">place</span> = <span class="variable">parsed</span><span class="punctuation delimiter">.</span><span class="field">value</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">place</span><span class="punctuation delimiter">.</span><span class="field">lat</span> <span class="operator">==</span> <span class="float">40.684540</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">place</span><span class="punctuation delimiter">.</span><span class="field">long</span> <span class="operator">==</span> <span class="operator">-</span><span class="float">74.401422</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;json stringify&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">x</span> = <span class="variable">Place</span><span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="field">lat</span> = <span class="float">51.997664</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">long</span> = <span class="operator">-</span><span class="float">0.740687</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">buf</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="number">100</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">fba</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">heap</span><span class="punctuation delimiter">.</span><span class="field">FixedBufferAllocator</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">buf</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">string</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="function">ArrayList</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span><span class="variable">fba</span><span class="punctuation delimiter">.</span><span class="function">allocator</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">json</span><span class="punctuation delimiter">.</span><span class="function">stringify</span><span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span> <span class="variable">string</span><span class="punctuation delimiter">.</span><span class="function">writer</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">string</span><span class="punctuation delimiter">.</span><span class="field">items</span><span class="punctuation delimiter">,</span>
        <span class="string">\\{&quot;lat&quot;:5.199766540527344e+01,&quot;long&quot;:-7.406870126724243e-01}</span>
    <span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

</code></pre>
<h3>Reader amd Writer</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;io writer usage&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">list</span> = <span class="variable">ArrayList</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span><span class="variable">test_allocator</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">bytes_written</span> = <span class="operator">try</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="function">writer</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">write</span><span class="punctuation bracket">(</span>
        <span class="string">&quot;Hello World!&quot;</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">bytes_written</span> <span class="operator">==</span> <span class="number">12</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">list</span><span class="punctuation delimiter">.</span><span class="field">items</span><span class="punctuation delimiter">,</span> <span class="string">&quot;Hello World!&quot;</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;io reader usage&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">message</span> = <span class="string">&quot;Hello File!&quot;</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">file</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">fs</span><span class="punctuation delimiter">.</span><span class="function">cwd</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">createFile</span><span class="punctuation bracket">(</span>
        <span class="string">&quot;junk_file2.txt&quot;</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">read</span> = <span class="boolean">true</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">file</span><span class="punctuation delimiter">.</span><span class="function">close</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">file</span><span class="punctuation delimiter">.</span><span class="function">writeAll</span><span class="punctuation bracket">(</span><span class="variable">message</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">file</span><span class="punctuation delimiter">.</span><span class="function">seekTo</span><span class="punctuation bracket">(</span><span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">contents</span> = <span class="operator">try</span> <span class="variable">file</span><span class="punctuation delimiter">.</span><span class="function">reader</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">readAllAlloc</span><span class="punctuation bracket">(</span>
        <span class="variable">test_allocator</span><span class="punctuation delimiter">,</span>
        <span class="variable">message</span><span class="punctuation delimiter">.</span><span class="field">len</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">test_allocator</span><span class="punctuation delimiter">.</span><span class="function">free</span><span class="punctuation bracket">(</span><span class="variable">contents</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">contents</span><span class="punctuation delimiter">,</span> <span class="variable">message</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword function">fn</span> <span class="function">nextLine</span><span class="punctuation bracket">(</span><span class="parameter">reader</span><span class="punctuation delimiter">:</span> <span class="type builtin">anytype</span><span class="punctuation delimiter">,</span> <span class="parameter">buffer</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span> <span class="exception">!</span><span class="operator">?</span><span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">line</span> = <span class="punctuation bracket">(</span><span class="operator">try</span> <span class="variable">reader</span><span class="punctuation delimiter">.</span><span class="function">readUntilDelimiterOrEof</span><span class="punctuation bracket">(</span>
        <span class="variable">buffer</span><span class="punctuation delimiter">,</span>
        <span class="character">&apos;\n&apos;</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation bracket">)</span> <span class="operator">orelse</span> <span class="keyword return">return</span> <span class="constant builtin">null</span><span class="punctuation delimiter">;</span>
    <span class="comment">// trim annoying windows-only carriage return character</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;builtin&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">os</span><span class="punctuation delimiter">.</span><span class="field">tag</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">windows</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="keyword return">return</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">mem</span><span class="punctuation delimiter">.</span><span class="function">trimRight</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">line</span><span class="punctuation delimiter">,</span> <span class="string">&quot;\r&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span> <span class="conditional">else</span> <span class="punctuation bracket">{</span>
        <span class="keyword return">return</span> <span class="variable">line</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;read until next line&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">stdout</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">io</span><span class="punctuation delimiter">.</span><span class="function">getStdOut</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">stdin</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">io</span><span class="punctuation delimiter">.</span><span class="function">getStdIn</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">stdout</span><span class="punctuation delimiter">.</span><span class="function">writeAll</span><span class="punctuation bracket">(</span>
        <span class="string">\\ Enter your name:</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">buffer</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="number">100</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">input</span> = <span class="punctuation bracket">(</span><span class="operator">try</span> <span class="variable">nextLine</span><span class="punctuation bracket">(</span><span class="variable">stdin</span><span class="punctuation delimiter">.</span><span class="function">reader</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">,</span> <span class="operator">&amp;</span><span class="variable">buffer</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="operator">.?</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">stdout</span><span class="punctuation delimiter">.</span><span class="function">writer</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">print</span><span class="punctuation bracket">(</span>
        <span class="string">&quot;Your name is: \&quot;{s}\&quot;\n&quot;</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="variable">input</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="comment">// Don&apos;t create a type like this! Use an</span>
<span class="comment">// arraylist with a fixed buffer allocator</span>
<span class="type qualifier">const</span> <span class="variable">MyByteList</span> = <span class="keyword">struct</span> <span class="punctuation bracket">{</span>
    <span class="field">data</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="number">100</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">,</span>
    <span class="field">items</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span> = <span class="operator">&amp;</span><span class="punctuation bracket">[</span><span class="variable builtin">_</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>

    <span class="type qualifier">const</span> <span class="variable">Writer</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">io</span><span class="punctuation delimiter">.</span><span class="function">Writer</span><span class="punctuation bracket">(</span>
        <span class="operator">*</span><span class="variable">MyByteList</span><span class="punctuation delimiter">,</span>
        <span class="keyword">error</span><span class="punctuation bracket">{</span><span class="variable builtin">EndOfBuffer</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
        <span class="variable">appendWrite</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="keyword function">fn</span> <span class="function">appendWrite</span><span class="punctuation bracket">(</span>
        <span class="parameter">self</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="variable">MyByteList</span><span class="punctuation delimiter">,</span>
        <span class="parameter">data</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">)</span> <span class="keyword">error</span><span class="punctuation bracket">{</span><span class="variable builtin">EndOfBuffer</span><span class="punctuation bracket">}</span><span class="exception">!</span><span class="type builtin">usize</span> <span class="punctuation bracket">{</span>
        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">items</span><span class="punctuation delimiter">.</span><span class="field">len</span> <span class="operator">+</span> <span class="variable">data</span><span class="punctuation delimiter">.</span><span class="field">len</span> <span class="operator">&gt;</span> <span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">data</span><span class="punctuation delimiter">.</span><span class="field">len</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
            <span class="keyword return">return</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">EndOfBuffer</span><span class="punctuation delimiter">;</span>
        <span class="punctuation bracket">}</span>
        <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">mem</span><span class="punctuation delimiter">.</span><span class="function">copy</span><span class="punctuation bracket">(</span>
            <span class="type builtin">u8</span><span class="punctuation delimiter">,</span>
            <span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">data</span><span class="punctuation bracket">[</span><span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">items</span><span class="punctuation delimiter">.</span><span class="field">len</span><span class="punctuation special">..</span><span class="punctuation bracket">]</span><span class="punctuation delimiter">,</span>
            <span class="variable">data</span><span class="punctuation delimiter">,</span>
        <span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">items</span> <span class="operator">=</span> <span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">data</span><span class="punctuation bracket">[</span><span class="number">0</span> <span class="punctuation special">..</span> <span class="variable">self</span><span class="punctuation delimiter">.</span><span class="field">items</span><span class="punctuation delimiter">.</span><span class="field">len</span> <span class="operator">+</span> <span class="variable">data</span><span class="punctuation delimiter">.</span><span class="field">len</span><span class="punctuation bracket">]</span><span class="punctuation delimiter">;</span>
        <span class="keyword return">return</span> <span class="variable">data</span><span class="punctuation delimiter">.</span><span class="field">len</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="keyword function">fn</span> <span class="function">writer</span><span class="punctuation bracket">(</span><span class="parameter">self</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="variable">MyByteList</span><span class="punctuation bracket">)</span> <span class="variable">Writer</span> <span class="punctuation bracket">{</span>
        <span class="keyword return">return</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">context</span> = <span class="variable">self</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;custom writer&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">bytes</span> = <span class="variable">MyByteList</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">bytes</span><span class="punctuation delimiter">.</span><span class="function">writer</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">write</span><span class="punctuation bracket">(</span><span class="string">&quot;Hello&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">bytes</span><span class="punctuation delimiter">.</span><span class="function">writer</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">write</span><span class="punctuation bracket">(</span><span class="string">&quot; Writer!&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">bytes</span><span class="punctuation delimiter">.</span><span class="field">items</span><span class="punctuation delimiter">,</span> <span class="string">&quot;Hello Writer!&quot;</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>rand</h3><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;random numbers&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">prng</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">rand</span><span class="punctuation delimiter">.</span><span class="field">DefaultPrng</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span><span class="label">blk</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">{</span>
        <span class="type qualifier">var</span> <span class="variable">seed</span><span class="punctuation delimiter">:</span> <span class="type builtin">u64</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>
        <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">os</span><span class="punctuation delimiter">.</span><span class="function">getrandom</span><span class="punctuation bracket">(</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">mem</span><span class="punctuation delimiter">.</span><span class="function">asBytes</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">seed</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="repeat">break</span> <span class="punctuation delimiter">:</span><span class="label">blk</span> <span class="variable">seed</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">rand</span> = <span class="variable">prng</span><span class="punctuation delimiter">.</span><span class="function">random</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">a</span> = <span class="variable">rand</span><span class="punctuation delimiter">.</span><span class="function">float</span><span class="punctuation bracket">(</span><span class="type builtin">f32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">b</span> = <span class="variable">rand</span><span class="punctuation delimiter">.</span><span class="function">boolean</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">c</span> = <span class="variable">rand</span><span class="punctuation delimiter">.</span><span class="function">int</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">d</span> = <span class="variable">rand</span><span class="punctuation delimiter">.</span><span class="function">intRangeAtMost</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation delimiter">,</span> <span class="number">255</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="comment">//suppress unused constant compile error</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="variable">a</span><span class="punctuation delimiter">,</span> <span class="variable">b</span><span class="punctuation delimiter">,</span> <span class="variable">c</span><span class="punctuation delimiter">,</span> <span class="variable">d</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;crypto random numbers&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">rand</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">crypto</span><span class="punctuation delimiter">.</span><span class="field">random</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">a</span> = <span class="variable">rand</span><span class="punctuation delimiter">.</span><span class="function">float</span><span class="punctuation bracket">(</span><span class="type builtin">f32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">b</span> = <span class="variable">rand</span><span class="punctuation delimiter">.</span><span class="function">boolean</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">c</span> = <span class="variable">rand</span><span class="punctuation delimiter">.</span><span class="function">int</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">d</span> = <span class="variable">rand</span><span class="punctuation delimiter">.</span><span class="function">intRangeAtMost</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation delimiter">,</span> <span class="number">255</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="comment">//suppress unused constant compile error</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="variable">a</span><span class="punctuation delimiter">,</span> <span class="variable">b</span><span class="punctuation delimiter">,</span> <span class="variable">c</span><span class="punctuation delimiter">,</span> <span class="variable">d</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>std.Thread</h3><pre><code class="zig"><span class="comment">//While Zig provides more advanced ways of writing concurrent and parallel code, std.Thread is available for making use of OS threads.</span>
<span class="comment">//Threads, however, aren’t particularly useful without strategies for thread safety.</span>
<span class="keyword function">fn</span> <span class="function">ticker</span><span class="punctuation bracket">(</span><span class="parameter">step</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span><span class="punctuation bracket">)</span> <span class="type builtin">void</span> <span class="punctuation bracket">{</span>
    <span class="repeat">while</span> <span class="punctuation bracket">(</span><span class="boolean">true</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">time</span><span class="punctuation delimiter">.</span><span class="function">sleep</span><span class="punctuation bracket">(</span><span class="number">1</span> <span class="operator">*</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">time</span><span class="punctuation delimiter">.</span><span class="field">ns_per_s</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="variable">tick</span> <span class="operator">+=</span> <span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">isize</span><span class="punctuation delimiter">,</span> <span class="variable">step</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
<span class="punctuation bracket">}</span>

<span class="type qualifier">var</span> <span class="variable">tick</span><span class="punctuation delimiter">:</span> <span class="type builtin">isize</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;threading&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">thread</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">Thread</span><span class="punctuation delimiter">.</span><span class="function">spawn</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span> <span class="variable">ticker</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="number">1</span><span class="punctuation bracket">)</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">thread</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">tick</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">time</span><span class="punctuation delimiter">.</span><span class="function">sleep</span><span class="punctuation bracket">(</span><span class="number">3</span> <span class="operator">*</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">time</span><span class="punctuation delimiter">.</span><span class="field">ns_per_s</span> <span class="operator">/</span> <span class="number">2</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">tick</span> <span class="operator">==</span> <span class="number">1</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h2>构建系统</h2><h3>build command</h3><p>Linking libc can be done via the command line via -lc, or via build.zig using exe.linkLibC();.</p><pre><code class="bash"><span class="comment"># zig [build-exe|build-lib|run|test] [options] [files]</span>
<span class="constant">zig</span> <span class="constant">build-exe</span> <span class="constant">-lc</span> <span class="constant">-target</span> <span class="constant">x86_64-linux-musl</span> <span class="constant">-O</span> <span class="constant">ReleaseFast</span> <span class="constant">-fstrip</span> <span class="constant">hi.zig</span>
<span class="comment"># 生成文档-femit-docs,build.zig也可docs.emit_docs = .emit;</span>
<span class="comment"># zig build-lib -femit-docs x.zig -target native-windows</span>

<span class="comment"># zig build install -h 仅在build.zig存在时有效</span>
<span class="constant">zig</span> <span class="constant">build</span> <span class="constant">-Dtarget=x86_64-linux-gnu</span> <span class="constant">-Doptimize=ReleaseFast</span>
</code></pre>
<h2>working with c</h2><h3>bool,char,long double</h3><table>
<thead>
<tr>
<th align="center">Type</th>
<th align="center">C Equivalent</th>
<th align="center">Minimum Size(bits)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">bool</td>
<td align="center">bool</td>
<td align="center">1/8</td>
</tr>
<tr>
<td align="center">c_char</td>
<td align="center">char</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">c_short</td>
<td align="center">short</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">c_ushort</td>
<td align="center">unsigned short</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">c_int</td>
<td align="center">int</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">c_uint</td>
<td align="center">unsigned int</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">c_long</td>
<td align="center">long</td>
<td align="center">32</td>
</tr>
<tr>
<td align="center">c_ulong</td>
<td align="center">unsigned long</td>
<td align="center">32</td>
</tr>
<tr>
<td align="center">c_longlong</td>
<td align="center">long long</td>
<td align="center">64</td>
</tr>
<tr>
<td align="center">c_ulonglong</td>
<td align="center">unsigned long long</td>
<td align="center">64</td>
</tr>
<tr>
<td align="center">c_longdouble</td>
<td align="center">long double</td>
<td align="center">N/A</td>
</tr>
<tr>
<td align="center">anyopaque</td>
<td align="center">void</td>
<td align="center">N/A</td>
</tr>
</tbody>
</table>
<h3>extern struct</h3><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">expect</span> = <span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;std&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">testing</span><span class="punctuation delimiter">.</span><span class="field">expect</span><span class="punctuation delimiter">;</span>

<span class="type qualifier">const</span> <span class="variable">Data</span> = <span class="attribute">extern</span> <span class="keyword">struct</span> <span class="punctuation bracket">{</span> <span class="field">a</span><span class="punctuation delimiter">:</span> <span class="type builtin">i32</span><span class="punctuation delimiter">,</span> <span class="field">b</span><span class="punctuation delimiter">:</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="field">c</span><span class="punctuation delimiter">:</span> <span class="type builtin">f32</span><span class="punctuation delimiter">,</span> <span class="field">d</span><span class="punctuation delimiter">:</span> <span class="type builtin">bool</span><span class="punctuation delimiter">,</span> <span class="field">e</span><span class="punctuation delimiter">:</span> <span class="type builtin">bool</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;hmm&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">x</span> = <span class="variable">Data</span><span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="field">a</span> = <span class="number">10005</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">b</span> = <span class="number">42</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">c</span> = <span class="operator">-</span><span class="float">10.5</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">d</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">e</span> = <span class="boolean">true</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">z</span> = <span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="punctuation bracket">[</span><span class="operator">*</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="function builtin">@ptrCast</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">x</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="operator">*</span><span class="type qualifier">const</span> <span class="type builtin">i32</span><span class="punctuation delimiter">,</span> <span class="function builtin">@ptrCast</span><span class="punctuation bracket">(</span><span class="function builtin">@alignCast</span><span class="punctuation bracket">(</span><span class="variable">z</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="operator">.*</span> <span class="operator">==</span> <span class="number">10005</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="operator">*</span><span class="type qualifier">const</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="function builtin">@ptrCast</span><span class="punctuation bracket">(</span><span class="function builtin">@alignCast</span><span class="punctuation bracket">(</span><span class="variable">z</span> <span class="operator">+</span> <span class="number">4</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="operator">.*</span> <span class="operator">==</span> <span class="number">42</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="operator">*</span><span class="type qualifier">const</span> <span class="type builtin">f32</span><span class="punctuation delimiter">,</span> <span class="function builtin">@ptrCast</span><span class="punctuation bracket">(</span><span class="function builtin">@alignCast</span><span class="punctuation bracket">(</span><span class="variable">z</span> <span class="operator">+</span> <span class="number">8</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="operator">.*</span> <span class="operator">==</span> <span class="operator">-</span><span class="float">10.5</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="operator">*</span><span class="type qualifier">const</span> <span class="type builtin">bool</span><span class="punctuation delimiter">,</span> <span class="function builtin">@ptrCast</span><span class="punctuation bracket">(</span><span class="function builtin">@alignCast</span><span class="punctuation bracket">(</span><span class="variable">z</span> <span class="operator">+</span> <span class="number">12</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="operator">.*</span> <span class="operator">==</span> <span class="boolean">false</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="operator">*</span><span class="type qualifier">const</span> <span class="type builtin">bool</span><span class="punctuation delimiter">,</span> <span class="function builtin">@ptrCast</span><span class="punctuation bracket">(</span><span class="function builtin">@alignCast</span><span class="punctuation bracket">(</span><span class="variable">z</span> <span class="operator">+</span> <span class="number">13</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="operator">.*</span> <span class="operator">==</span> <span class="boolean">true</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>align</h3><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">b1</span><span class="punctuation delimiter">:</span> <span class="type builtin">u64</span> <span class="storageclass">align</span><span class="punctuation bracket">(</span><span class="number">1</span><span class="punctuation bracket">)</span> = <span class="number">100</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">b2</span> <span class="storageclass">align</span><span class="punctuation bracket">(</span><span class="number">1</span><span class="punctuation bracket">)</span> = <span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">u64</span><span class="punctuation delimiter">,</span> <span class="number">100</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;aligned pointers&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">a</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> <span class="storageclass">align</span><span class="punctuation bracket">(</span><span class="number">8</span><span class="punctuation bracket">)</span> = <span class="number">5</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">a</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="operator">*</span><span class="storageclass">align</span><span class="punctuation bracket">(</span><span class="number">8</span><span class="punctuation bracket">)</span> <span class="type qualifier">const</span> <span class="type builtin">u32</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword function">fn</span> <span class="function">total</span><span class="punctuation bracket">(</span><span class="parameter">a</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="storageclass">align</span><span class="punctuation bracket">(</span><span class="number">64</span><span class="punctuation bracket">)</span> <span class="type qualifier">const</span> <span class="punctuation bracket">[</span><span class="number">64</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">)</span> <span class="type builtin">u32</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">sum</span><span class="punctuation delimiter">:</span> <span class="type builtin">u32</span> = <span class="number">0</span><span class="punctuation delimiter">;</span>
    <span class="repeat">for</span> <span class="punctuation bracket">(</span><span class="variable">a</span><span class="punctuation bracket">)</span> |<span class="variable">elem</span>| <span class="variable">sum</span> <span class="operator">+=</span> <span class="variable">elem</span><span class="punctuation delimiter">;</span>
    <span class="keyword return">return</span> <span class="variable">sum</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;passing aligned data&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">x</span> <span class="storageclass">align</span><span class="punctuation bracket">(</span><span class="number">128</span><span class="punctuation bracket">)</span> = <span class="punctuation bracket">[</span><span class="number">1</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span><span class="punctuation bracket">{</span><span class="number">10</span><span class="punctuation bracket">}</span> <span class="operator">**</span> <span class="number">64</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">total</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">x</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="number">640</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;bit aligned pointers&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">x</span> = <span class="variable">MovementState</span><span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="field">running</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">crouching</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">jumping</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">in_air</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">running</span> = <span class="operator">&amp;</span><span class="variable">x</span><span class="punctuation delimiter">.</span><span class="field">running</span><span class="punctuation delimiter">;</span>
    <span class="variable">running</span><span class="operator">.*</span> <span class="operator">=</span> <span class="boolean">true</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">crouching</span> = <span class="operator">&amp;</span><span class="variable">x</span><span class="punctuation delimiter">.</span><span class="field">crouching</span><span class="punctuation delimiter">;</span>
    <span class="variable">crouching</span><span class="operator">.*</span> <span class="operator">=</span> <span class="boolean">true</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">running</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="operator">*</span><span class="storageclass">align</span><span class="punctuation bracket">(</span><span class="number">1</span><span class="punctuation delimiter">:</span><span class="number">0</span><span class="punctuation delimiter">:</span><span class="number">1</span><span class="punctuation bracket">)</span> <span class="type builtin">bool</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">crouching</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="operator">*</span><span class="storageclass">align</span><span class="punctuation bracket">(</span><span class="number">1</span><span class="punctuation delimiter">:</span><span class="number">1</span><span class="punctuation delimiter">:</span><span class="number">1</span><span class="punctuation bracket">)</span> <span class="type builtin">bool</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;std&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">meta</span><span class="punctuation delimiter">.</span><span class="function">eql</span><span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="field">running</span> = <span class="boolean">true</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">crouching</span> = <span class="boolean">true</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">jumping</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">in_air</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>packed struct</h3><p>By default, all struct fields in Zig are naturally aligned to that of @alignOf(FieldType) (the ABI size).</p><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">MovementState</span> = <span class="attribute">packed</span> <span class="keyword">struct</span> <span class="punctuation bracket">{</span>
    <span class="field">running</span><span class="punctuation delimiter">:</span> <span class="type builtin">bool</span><span class="punctuation delimiter">,</span>
    <span class="field">crouching</span><span class="punctuation delimiter">:</span> <span class="type builtin">bool</span><span class="punctuation delimiter">,</span>
    <span class="field">jumping</span><span class="punctuation delimiter">:</span> <span class="type builtin">bool</span><span class="punctuation delimiter">,</span>
    <span class="field">in_air</span><span class="punctuation delimiter">:</span> <span class="type builtin">bool</span><span class="punctuation delimiter">,</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

<span class="keyword">test</span> <span class="string">&quot;packed struct size&quot;</span> <span class="punctuation bracket">{</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@sizeOf</span><span class="punctuation bracket">(</span><span class="variable">MovementState</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="number">1</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@bitSizeOf</span><span class="punctuation bracket">(</span><span class="variable">MovementState</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="number">4</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">state</span> = <span class="variable">MovementState</span><span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="field">running</span> = <span class="boolean">true</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">crouching</span> = <span class="boolean">true</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">jumping</span> = <span class="boolean">true</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">in_air</span> = <span class="boolean">true</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">state</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>

<span class="keyword">test</span> <span class="string">&quot;bit aligned pointers&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">x</span> = <span class="variable">MovementState</span><span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="field">running</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">crouching</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">jumping</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">in_air</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">running</span> = <span class="operator">&amp;</span><span class="variable">x</span><span class="punctuation delimiter">.</span><span class="field">running</span><span class="punctuation delimiter">;</span>
    <span class="variable">running</span><span class="operator">.*</span> <span class="operator">=</span> <span class="boolean">true</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">crouching</span> = <span class="operator">&amp;</span><span class="variable">x</span><span class="punctuation delimiter">.</span><span class="field">crouching</span><span class="punctuation delimiter">;</span>
    <span class="variable">crouching</span><span class="operator">.*</span> <span class="operator">=</span> <span class="boolean">true</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">running</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="operator">*</span><span class="storageclass">align</span><span class="punctuation bracket">(</span><span class="number">1</span><span class="punctuation delimiter">:</span><span class="number">0</span><span class="punctuation delimiter">:</span><span class="number">1</span><span class="punctuation bracket">)</span> <span class="type builtin">bool</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@TypeOf</span><span class="punctuation bracket">(</span><span class="variable">crouching</span><span class="punctuation bracket">)</span> <span class="operator">==</span> <span class="operator">*</span><span class="storageclass">align</span><span class="punctuation bracket">(</span><span class="number">1</span><span class="punctuation delimiter">:</span><span class="number">1</span><span class="punctuation delimiter">:</span><span class="number">1</span><span class="punctuation bracket">)</span> <span class="type builtin">bool</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;std&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">meta</span><span class="punctuation delimiter">.</span><span class="function">eql</span><span class="punctuation bracket">(</span><span class="variable">x</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="field">running</span> = <span class="boolean">true</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">crouching</span> = <span class="boolean">true</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">jumping</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
        <span class="punctuation delimiter">.</span><span class="field">in_air</span> = <span class="boolean">false</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>cimport</h3><p>@cImport(expression) type<br>cImport is only available when linking libc.<br>Similar to @import, this returns a struct type with declarations. It is typically recommended to only use one instance of @cImport in an application to avoid symbol collisions;</p><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">c</span> = <span class="function builtin">@cImport</span><span class="punctuation bracket">(</span><span class="punctuation bracket">{</span>
    <span class="function builtin">@cDefine</span><span class="punctuation bracket">(</span><span class="string">&quot;NDEBUG&quot;</span><span class="punctuation delimiter">,</span> <span class="variable">builtin</span><span class="punctuation delimiter">.</span><span class="field">mode</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">ReleaseFast</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">something</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="function builtin">@cDefine</span><span class="punctuation bracket">(</span><span class="string">&quot;_GNU_SOURCE&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
    <span class="function builtin">@cInclude</span><span class="punctuation bracket">(</span><span class="string">&quot;stdlib.h&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">something</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="function builtin">@cUndef</span><span class="punctuation bracket">(</span><span class="string">&quot;_GNU_SOURCE&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
    <span class="function builtin">@cInclude</span><span class="punctuation bracket">(</span><span class="string">&quot;soundio.h&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

<span class="type qualifier">const</span> <span class="variable">c</span> = <span class="function builtin">@cImport</span><span class="punctuation bracket">(</span><span class="punctuation bracket">{</span>
    <span class="comment">// See https://github.com/ziglang/zig/issues/515</span>
    <span class="function builtin">@cDefine</span><span class="punctuation bracket">(</span><span class="string">&quot;_NO_CRT_STDIO_INLINE&quot;</span><span class="punctuation delimiter">,</span> <span class="string">&quot;1&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="function builtin">@cInclude</span><span class="punctuation bracket">(</span><span class="string">&quot;stdio.h&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="attribute">pub</span> <span class="keyword function">fn</span> <span class="function">main</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="type builtin">void</span> <span class="punctuation bracket">{</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">c</span><span class="punctuation delimiter">.</span><span class="function">printf</span><span class="punctuation bracket">(</span><span class="string">&quot;hello\n&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
</div>
</body>
</html>
