<!DOCTYPE html>
<html>
  <head id="head">
	<meta charset="UTF-8">
	<title id="title">YuHeng&apos;s blog! - Zine</title>
	<link href="/style.css" rel="stylesheet">
  </head>
<body>
	<nav id="menu" class="centered">
		<a href="/">主页</a>
		<a href="/blog/">日志</a>
		<a href="/sample/">用例</a>
	</nav>
	<h1>zig</h1>
	<div id="content"><h3>?manpage ?search</h3><ol><li>Chrome-设置-搜索引擎-管理搜索引擎和网站搜素-网站搜索-新增</li><li>Edge-设置-搜:地址栏和搜索-管理搜索引擎-添加</li></ol><pre><code>zig
zig
https://ziglang.org/documentation/master/std/#A;std?%s
</code></pre><h3>zig CookBook</h3><p><a href="https://cookbook.ziglang.cc/intro.html" target="_blank">https://cookbook.ziglang.cc/intro.html</a></p><h3>zig ?collection <a href="https://github.com/ziglang/zig/issues/7782" target="_blank">https://github.com/ziglang/zig/issues/7782</a></h3><ol><li>ArrayList[Aligned][Unmanaged] ->vector</li><li>MultiArrayList ->结构中各元素组成各自的切片,同字段放一个切片中,便于列遍历(ArrayList是行遍历)</li><li>SegmentedList 类似ArrayList但避免了预分配耗尽后的拷贝搬迁,类似一半的deque</li><li>SinglyLinkedList ->forward_list</li><li>DoublyLinkedList ->list</li><li>[Auto/String]HashMap[Unmanaged] ->unordered_map/BufMap-BufSet拷贝key后拥有它,特化且带数据所有权StringHashMap</li><li><em>[Auto/String]ArrayHashMap[Unmanaged]</em> 特化遍历(空间换时间),否则用HashMap</li><li><a href="https://github.com/ziglang/std-lib-orphanage/tree/master" target="_blank">https://github.com/ziglang/std-lib-orphanage/tree/master</a><ul><li>std.rb.Tree</li><li>std.BloomFilter:用来检测一个元素是否在一个集合中,它的优点是空间效率高，查询速度快，缺点是有一定的误判率和删除困难;桶为1 bit(优化空间),多个hash函数将多个bit置为1,以此表示某个key存在(元素越多,冲突概率越大),不存在则一定不存在.(有点类似记忆与神经元)</li></ul></li></ol><h3>?hello ?world</h3><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">print</span> = <span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;std&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">debug</span><span class="punctuation delimiter">.</span><span class="field">print</span><span class="punctuation delimiter">;</span>
<span class="attribute">pub</span> <span class="keyword function">fn</span> <span class="function">main</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="type builtin">void</span> <span class="punctuation bracket">{</span>
    <span class="variable">print</span><span class="punctuation bracket">(</span><span class="string">&quot;Hello, world!\n&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">std</span> = <span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;std&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="attribute">pub</span> <span class="keyword function">fn</span> <span class="function">main</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="exception">!</span><span class="type builtin">void</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">stdout</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">io</span><span class="punctuation delimiter">.</span><span class="function">getStdOut</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">writer</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">stdout</span><span class="punctuation delimiter">.</span><span class="function">print</span><span class="punctuation bracket">(</span><span class="string">&quot;Hello, {s}!\n&quot;</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="string">&quot;world&quot;</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>?遍历 ?目录 ?workdir</h3><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">print</span>=<span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;std&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">debug</span><span class="punctuation delimiter">.</span><span class="field">print</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">std</span>=<span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;std&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="attribute">pub</span> <span class="keyword function">fn</span> <span class="function">main</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="exception">!</span><span class="type builtin">void</span><span class="punctuation bracket">{</span>
    <span class="type qualifier">var</span> <span class="variable">home</span>=<span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">fs</span><span class="punctuation delimiter">.</span><span class="function">cwd</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">idir</span>=<span class="operator">try</span> <span class="variable">home</span><span class="punctuation delimiter">.</span><span class="function">openIterableDir</span><span class="punctuation bracket">(</span><span class="string">&quot;.&quot;</span><span class="punctuation delimiter">,</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">iter</span>=<span class="variable">idir</span><span class="punctuation delimiter">.</span><span class="function">iterate</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="repeat">while</span><span class="punctuation bracket">(</span><span class="operator">try</span> <span class="variable">iter</span><span class="punctuation delimiter">.</span><span class="function">next</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">|e|</span> <span class="punctuation bracket">{</span>
        <span class="variable">print</span><span class="punctuation bracket">(</span><span class="string">&quot;Entry: name={s} kind={any}\n&quot;</span><span class="punctuation delimiter">,</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="variable">e</span><span class="punctuation delimiter">.</span><span class="field">name</span><span class="punctuation delimiter">,</span><span class="variable">e</span><span class="punctuation delimiter">.</span><span class="field">kind</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>
    <span class="variable">idir</span><span class="punctuation delimiter">.</span><span class="function">close</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>?http ?server</h3><pre><code class="zig"><span class="type qualifier">const</span> <span class="variable">std</span> = <span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;std&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">testing</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">testing</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">http</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">http</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">mem</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">mem</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">net</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">net</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">Uri</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">Uri</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">Allocator</span> = <span class="variable">mem</span><span class="punctuation delimiter">.</span><span class="field">Allocator</span><span class="punctuation delimiter">;</span>
<span class="type qualifier">const</span> <span class="variable">assert</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">debug</span><span class="punctuation delimiter">.</span><span class="field">assert</span><span class="punctuation delimiter">;</span>

<span class="comment">//const Server = @This();</span>
<span class="comment">//const proto = @import(&quot;protocol.zig&quot;);</span>

<span class="comment">//test &quot;HTTP server handles a chunked transfer coding request&quot;</span>
<span class="attribute">pub</span> <span class="keyword function">fn</span> <span class="function">main</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span> <span class="type builtin">anyerror</span><span class="exception">!</span><span class="type builtin">void</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">builtin</span> = <span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;builtin&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="comment">// This test requires spawning threads.</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">builtin</span><span class="punctuation delimiter">.</span><span class="field">single_threaded</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="keyword return">return</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">SkipZigTest</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="type qualifier">const</span> <span class="variable">native_endian</span> = <span class="attribute">comptime</span> <span class="variable">builtin</span><span class="punctuation delimiter">.</span><span class="field">cpu</span><span class="punctuation delimiter">.</span><span class="field">arch</span><span class="punctuation delimiter">.</span><span class="function">endian</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">builtin</span><span class="punctuation delimiter">.</span><span class="field">zig_backend</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">stage2_llvm</span> <span class="keyword operator">and</span> <span class="variable">native_endian</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">Big</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="keyword return">return</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">SkipZigTest</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">builtin</span><span class="punctuation delimiter">.</span><span class="field">os</span><span class="punctuation delimiter">.</span><span class="field">tag</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">wasi</span><span class="punctuation bracket">)</span> <span class="keyword return">return</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">SkipZigTest</span><span class="punctuation delimiter">;</span>

    <span class="comment">//const allocator = std.testing.allocator;</span>
    <span class="type qualifier">const</span> <span class="variable">allocator</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">heap</span><span class="punctuation delimiter">.</span><span class="field">page_allocator</span><span class="punctuation delimiter">;</span>
    <span class="comment">//const expect = std.testing.expect;</span>
    <span class="comment">//_ = expect;</span>

    <span class="type qualifier">const</span> <span class="variable">max_header_size</span> = <span class="number">8192</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">server</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">http</span><span class="punctuation delimiter">.</span><span class="field">Server</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span><span class="variable">allocator</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">reuse_address</span> = <span class="boolean">true</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">server</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">address</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">net</span><span class="punctuation delimiter">.</span><span class="field">Address</span><span class="punctuation delimiter">.</span><span class="function">parseIp</span><span class="punctuation bracket">(</span><span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation delimiter">,</span> <span class="number">8000</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">server</span><span class="punctuation delimiter">.</span><span class="function">listen</span><span class="punctuation bracket">(</span><span class="variable">address</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">server_port</span> = <span class="variable">server</span><span class="punctuation delimiter">.</span><span class="field">socket</span><span class="punctuation delimiter">.</span><span class="field">listen_address</span><span class="punctuation delimiter">.</span><span class="field">in</span><span class="punctuation delimiter">.</span><span class="function">getPort</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="variable">server_port</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">server_thread</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">Thread</span><span class="punctuation delimiter">.</span><span class="function">spawn</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span> <span class="punctuation bracket">(</span><span class="keyword">struct</span> <span class="punctuation bracket">{</span>
        <span class="keyword function">fn</span> <span class="function">apply</span><span class="punctuation bracket">(</span><span class="parameter">s</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">http</span><span class="punctuation delimiter">.</span><span class="field">Server</span><span class="punctuation bracket">)</span> <span class="exception">!</span><span class="type builtin">void</span> <span class="punctuation bracket">{</span>
            <span class="type qualifier">var</span> <span class="variable">res</span> = <span class="operator">try</span> <span class="variable">s</span><span class="punctuation delimiter">.</span><span class="function">accept</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span>
                <span class="punctuation delimiter">.</span><span class="field">allocator</span> = <span class="variable">allocator</span><span class="punctuation delimiter">,</span>
                <span class="punctuation delimiter">.</span><span class="field">header_strategy</span> = <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">dynamic</span> = <span class="variable">max_header_size</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
            <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="keyword">defer</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="keyword">defer</span> <span class="variable">_</span> <span class="operator">=</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">reset</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">wait</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="comment">//try expect(res.request.transfer_encoding.? == .chunked);</span>

            <span class="type qualifier">const</span> <span class="variable">server_body</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span> = <span class="string">&quot;message from server!\n&quot;</span><span class="punctuation delimiter">;</span>
            <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="field">transfer_encoding</span> <span class="operator">=</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">content_length</span> = <span class="variable">server_body</span><span class="punctuation delimiter">.</span><span class="field">len</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="field">headers</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="string">&quot;content-type&quot;</span><span class="punctuation delimiter">,</span> <span class="string">&quot;text/plain&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="field">headers</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="string">&quot;connection&quot;</span><span class="punctuation delimiter">,</span> <span class="string">&quot;close&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">do</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

            <span class="comment">//var buf: [128]u8 = undefined;</span>
            <span class="comment">//const n = try res.readAll(&amp;buf);</span>
            <span class="comment">//try expect(std.mem.eql(u8, buf[0..n], &quot;ABCD&quot;));</span>
            <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">writer</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">writeAll</span><span class="punctuation bracket">(</span><span class="variable">server_body</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">finish</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="punctuation bracket">}</span>
    <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">apply</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="operator">&amp;</span><span class="variable">server</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="variable">server_thread</span><span class="punctuation delimiter">.</span><span class="function">join</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<h3>std.http</h3><ol><li>head<br>key,value字段组合的数组,key-index散列表</li></ol><pre><code class="zig"><span class="attribute">pub</span> <span class="type qualifier">const</span> <span class="variable">HeaderList</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="function">ArrayListUnmanaged</span><span class="punctuation bracket">(</span><span class="variable">Field</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="attribute">pub</span> <span class="type qualifier">const</span> <span class="variable">HeaderIndexList</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="function">ArrayListUnmanaged</span><span class="punctuation bracket">(</span><span class="type builtin">usize</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="attribute">pub</span> <span class="type qualifier">const</span> <span class="variable">HeaderIndex</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="function">HashMapUnmanaged</span><span class="punctuation bracket">(</span><span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">HeaderIndexList</span><span class="punctuation delimiter">,</span> <span class="variable">CaseInsensitiveStringContext</span><span class="punctuation delimiter">,</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">hash_map</span><span class="punctuation delimiter">.</span><span class="field">default_max_load_percentage</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="attribute">pub</span> <span class="type qualifier">const</span> <span class="variable">Field</span> = <span class="keyword">struct</span> <span class="punctuation bracket">{</span>
    <span class="field">name</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span>
    <span class="field">value</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span><span class="punctuation delimiter">,</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter"></span>
<span class="attribute">pub</span> <span class="type qualifier">const</span> <span class="variable">Headers</span> = <span class="keyword">struct</span> <span class="punctuation bracket">{</span>
    <span class="field">allocator</span><span class="punctuation delimiter">:</span> <span class="variable">Allocator</span><span class="punctuation delimiter">,</span>
    <span class="field">list</span><span class="punctuation delimiter">:</span> <span class="variable">HeaderList</span> = <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
    <span class="field">index</span><span class="punctuation delimiter">:</span> <span class="variable">HeaderIndex</span> = <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
<span class="punctuation bracket">}</span><span class="punctuation delimiter"></span>
</code></pre>
<ol><li>protocol<br>解析head and body</li></ol><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;HeadersParser.read length&quot;</span> <span class="punctuation bracket">{</span>
    <span class="comment">// mock BufferedConnection for read</span>

    <span class="type qualifier">var</span> <span class="variable">r</span> = <span class="variable">HeadersParser</span><span class="punctuation delimiter">.</span><span class="function">initDynamic</span><span class="punctuation bracket">(</span><span class="number">256</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">r</span><span class="punctuation delimiter">.</span><span class="field">header_bytes</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">testing</span><span class="punctuation delimiter">.</span><span class="field">allocator</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">data</span> = <span class="string">&quot;GET / HTTP/1.1\r\nHost: localhost\r\nContent-Length: 5\r\n\r\nHello&quot;</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">fbs</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">io</span><span class="punctuation delimiter">.</span><span class="function">fixedBufferStream</span><span class="punctuation bracket">(</span><span class="variable">data</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">var</span> <span class="variable">conn</span> = <span class="variable">MockBufferedConnection</span><span class="punctuation bracket">{</span>
        <span class="punctuation delimiter">.</span><span class="field">conn</span> = <span class="variable">fbs</span><span class="punctuation delimiter">,</span>
    <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>

    <span class="repeat">while</span> <span class="punctuation bracket">(</span><span class="boolean">true</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span> <span class="comment">// read headers</span>
        <span class="operator">try</span> <span class="variable">conn</span><span class="punctuation delimiter">.</span><span class="function">fill</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

        <span class="type qualifier">const</span> <span class="variable">nchecked</span> = <span class="operator">try</span> <span class="variable">r</span><span class="punctuation delimiter">.</span><span class="function">checkCompleteHead</span><span class="punctuation bracket">(</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">testing</span><span class="punctuation delimiter">.</span><span class="field">allocator</span><span class="punctuation delimiter">,</span> <span class="variable">conn</span><span class="punctuation delimiter">.</span><span class="function">peek</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="variable">conn</span><span class="punctuation delimiter">.</span><span class="function">drop</span><span class="punctuation bracket">(</span><span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">u16</span><span class="punctuation delimiter">,</span> <span class="function builtin">@intCast</span><span class="punctuation bracket">(</span><span class="variable">nchecked</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

        <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">r</span><span class="punctuation delimiter">.</span><span class="field">state</span><span class="punctuation delimiter">.</span><span class="function">isContent</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span> <span class="repeat">break</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="type qualifier">var</span> <span class="variable">buf</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="number">8</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>

    <span class="variable">r</span><span class="punctuation delimiter">.</span><span class="field">next_chunk_length</span> <span class="operator">=</span> <span class="number">5</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">len</span> = <span class="operator">try</span> <span class="variable">r</span><span class="punctuation delimiter">.</span><span class="function">read</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">conn</span><span class="punctuation delimiter">,</span> <span class="operator">&amp;</span><span class="variable">buf</span><span class="punctuation delimiter">,</span> <span class="boolean">false</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">testing</span><span class="punctuation delimiter">.</span><span class="function">expectEqual</span><span class="punctuation bracket">(</span><span class="function builtin">@as</span><span class="punctuation bracket">(</span><span class="type builtin">usize</span><span class="punctuation delimiter">,</span> <span class="number">5</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">,</span> <span class="variable">len</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">testing</span><span class="punctuation delimiter">.</span><span class="function">expectEqualStrings</span><span class="punctuation bracket">(</span><span class="string">&quot;Hello&quot;</span><span class="punctuation delimiter">,</span> <span class="variable">buf</span><span class="punctuation bracket">[</span><span class="number">0</span><span class="punctuation special">..</span><span class="variable">len</span><span class="punctuation bracket">]</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">testing</span><span class="punctuation delimiter">.</span><span class="function">expectEqualStrings</span><span class="punctuation bracket">(</span><span class="string">&quot;GET / HTTP/1.1\r\nHost: localhost\r\nContent-Length: 5\r\n\r\n&quot;</span><span class="punctuation delimiter">,</span> <span class="variable">r</span><span class="punctuation delimiter">.</span><span class="field">header_bytes</span><span class="punctuation delimiter">.</span><span class="field">items</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
<p>3.server<br>accept->wait->readAll->do->writeAll</p><ol><li>accept:</li><li>wait:Wait for the client to send a complete request head.</li><li>do: Send the response headers.</li><li>readAll:Reads data from the response body. Must be called after wait.</li><li>writeAll:Write bytes to the server.</li></ol><pre><code class="zig"><span class="keyword">test</span> <span class="string">&quot;HTTP server handles a chunked transfer coding request&quot;</span> <span class="punctuation bracket">{</span>
    <span class="type qualifier">const</span> <span class="variable">builtin</span> = <span class="function builtin">@import</span><span class="punctuation bracket">(</span><span class="string">&quot;builtin&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="comment">// This test requires spawning threads.</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">builtin</span><span class="punctuation delimiter">.</span><span class="field">single_threaded</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="keyword return">return</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">SkipZigTest</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="type qualifier">const</span> <span class="variable">native_endian</span> = <span class="attribute">comptime</span> <span class="variable">builtin</span><span class="punctuation delimiter">.</span><span class="field">cpu</span><span class="punctuation delimiter">.</span><span class="field">arch</span><span class="punctuation delimiter">.</span><span class="function">endian</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">builtin</span><span class="punctuation delimiter">.</span><span class="field">zig_backend</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">stage2_llvm</span> <span class="keyword operator">and</span> <span class="variable">native_endian</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">Big</span><span class="punctuation bracket">)</span> <span class="punctuation bracket">{</span>
        <span class="comment">// https://github.com/ziglang/zig/issues/13782</span>
        <span class="keyword return">return</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">SkipZigTest</span><span class="punctuation delimiter">;</span>
    <span class="punctuation bracket">}</span>

    <span class="conditional">if</span> <span class="punctuation bracket">(</span><span class="variable">builtin</span><span class="punctuation delimiter">.</span><span class="field">os</span><span class="punctuation delimiter">.</span><span class="field">tag</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">wasi</span><span class="punctuation bracket">)</span> <span class="keyword return">return</span> <span class="keyword">error</span><span class="punctuation delimiter">.</span><span class="variable builtin">SkipZigTest</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">allocator</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">testing</span><span class="punctuation delimiter">.</span><span class="field">allocator</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">expect</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">testing</span><span class="punctuation delimiter">.</span><span class="field">expect</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">max_header_size</span> = <span class="number">8192</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">var</span> <span class="variable">server</span> = <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">http</span><span class="punctuation delimiter">.</span><span class="field">Server</span><span class="punctuation delimiter">.</span><span class="function">init</span><span class="punctuation bracket">(</span><span class="variable">allocator</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">reuse_address</span> = <span class="boolean">true</span> <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">server</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">address</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">net</span><span class="punctuation delimiter">.</span><span class="field">Address</span><span class="punctuation delimiter">.</span><span class="function">parseIp</span><span class="punctuation bracket">(</span><span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation delimiter">,</span> <span class="number">0</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="operator">try</span> <span class="variable">server</span><span class="punctuation delimiter">.</span><span class="function">listen</span><span class="punctuation bracket">(</span><span class="variable">address</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="type qualifier">const</span> <span class="variable">server_port</span> = <span class="variable">server</span><span class="punctuation delimiter">.</span><span class="field">socket</span><span class="punctuation delimiter">.</span><span class="field">listen_address</span><span class="punctuation delimiter">.</span><span class="field">in</span><span class="punctuation delimiter">.</span><span class="function">getPort</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">server_thread</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">Thread</span><span class="punctuation delimiter">.</span><span class="function">spawn</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span> <span class="punctuation bracket">(</span><span class="keyword">struct</span> <span class="punctuation bracket">{</span>
        <span class="keyword function">fn</span> <span class="function">apply</span><span class="punctuation bracket">(</span><span class="parameter">s</span><span class="punctuation delimiter">:</span> <span class="operator">*</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">http</span><span class="punctuation delimiter">.</span><span class="field">Server</span><span class="punctuation bracket">)</span> <span class="exception">!</span><span class="type builtin">void</span> <span class="punctuation bracket">{</span>
            <span class="type qualifier">var</span> <span class="variable">res</span> = <span class="operator">try</span> <span class="variable">s</span><span class="punctuation delimiter">.</span><span class="function">accept</span><span class="punctuation bracket">(</span><span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span>
                <span class="punctuation delimiter">.</span><span class="field">allocator</span> = <span class="variable">allocator</span><span class="punctuation delimiter">,</span>
                <span class="punctuation delimiter">.</span><span class="field">header_strategy</span> = <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">dynamic</span> = <span class="variable">max_header_size</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">,</span>
            <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="keyword">defer</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">deinit</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="keyword">defer</span> <span class="variable">_</span> <span class="operator">=</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">reset</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">wait</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

            <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">res</span><span class="punctuation delimiter">.</span><span class="field">request</span><span class="punctuation delimiter">.</span><span class="field">transfer_encoding</span><span class="operator">.?</span> <span class="operator">==</span> <span class="punctuation delimiter">.</span><span class="variable builtin">chunked</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

            <span class="type qualifier">const</span> <span class="variable">server_body</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="punctuation bracket">]</span><span class="type qualifier">const</span> <span class="type builtin">u8</span> = <span class="string">&quot;message from server!\n&quot;</span><span class="punctuation delimiter">;</span>
            <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="field">transfer_encoding</span> <span class="operator">=</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span> <span class="punctuation delimiter">.</span><span class="field">content_length</span> = <span class="variable">server_body</span><span class="punctuation delimiter">.</span><span class="field">len</span> <span class="punctuation bracket">}</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="field">headers</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="string">&quot;content-type&quot;</span><span class="punctuation delimiter">,</span> <span class="string">&quot;text/plain&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="field">headers</span><span class="punctuation delimiter">.</span><span class="function">append</span><span class="punctuation bracket">(</span><span class="string">&quot;connection&quot;</span><span class="punctuation delimiter">,</span> <span class="string">&quot;close&quot;</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">do</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

            <span class="type qualifier">var</span> <span class="variable">buf</span><span class="punctuation delimiter">:</span> <span class="punctuation bracket">[</span><span class="number">128</span><span class="punctuation bracket">]</span><span class="type builtin">u8</span> = <span class="constant builtin">undefined</span><span class="punctuation delimiter">;</span>
            <span class="type qualifier">const</span> <span class="variable">n</span> = <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">readAll</span><span class="punctuation bracket">(</span><span class="operator">&amp;</span><span class="variable">buf</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">expect</span><span class="punctuation bracket">(</span><span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">mem</span><span class="punctuation delimiter">.</span><span class="function">eql</span><span class="punctuation bracket">(</span><span class="type builtin">u8</span><span class="punctuation delimiter">,</span> <span class="variable">buf</span><span class="punctuation bracket">[</span><span class="number">0</span><span class="punctuation special">..</span><span class="variable">n</span><span class="punctuation bracket">]</span><span class="punctuation delimiter">,</span> <span class="string">&quot;ABCD&quot;</span><span class="punctuation bracket">)</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">writer</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="function">writeAll</span><span class="punctuation bracket">(</span><span class="variable">server_body</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
            <span class="operator">try</span> <span class="variable">res</span><span class="punctuation delimiter">.</span><span class="function">finish</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
        <span class="punctuation bracket">}</span>
    <span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">.</span><span class="field">apply</span><span class="punctuation delimiter">,</span> <span class="punctuation delimiter">.</span><span class="punctuation bracket">{</span><span class="operator">&amp;</span><span class="variable">server</span><span class="punctuation bracket">}</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">request_bytes</span> =
        <span class="string">&quot;POST / HTTP/1.1\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;Content-Type: text/plain\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;Transfer-Encoding: chunked\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;1\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;A\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;1\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;B\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;2\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;CD\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;0\r\n&quot;</span> <span class="operator">++</span>
        <span class="string">&quot;\r\n&quot;</span><span class="punctuation delimiter">;</span>

    <span class="type qualifier">const</span> <span class="variable">stream</span> = <span class="operator">try</span> <span class="variable">std</span><span class="punctuation delimiter">.</span><span class="field">net</span><span class="punctuation delimiter">.</span><span class="function">tcpConnectToHost</span><span class="punctuation bracket">(</span><span class="variable">allocator</span><span class="punctuation delimiter">,</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation delimiter">,</span> <span class="variable">server_port</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="keyword">defer</span> <span class="variable">stream</span><span class="punctuation delimiter">.</span><span class="function">close</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
    <span class="variable">_</span> <span class="operator">=</span> <span class="operator">try</span> <span class="variable">stream</span><span class="punctuation delimiter">.</span><span class="function">writeAll</span><span class="punctuation bracket">(</span><span class="variable">request_bytes</span><span class="punctuation bracket">[</span><span class="number">0</span><span class="punctuation special">..</span><span class="punctuation bracket">]</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>

    <span class="variable">server_thread</span><span class="punctuation delimiter">.</span><span class="function">join</span><span class="punctuation bracket">(</span><span class="punctuation bracket">)</span><span class="punctuation delimiter">;</span>
<span class="punctuation bracket">}</span>
</code></pre>
</div>
</body>
</html>
