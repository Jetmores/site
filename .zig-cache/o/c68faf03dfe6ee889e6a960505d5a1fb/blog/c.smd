<!DOCTYPE html>
<html>
  <head id="head">
	<meta charset="UTF-8">
	<title id="title">YuHeng&apos;s blog! - Zine</title>
	<link href="/style.css" rel="stylesheet">
  </head>
<body>
	<nav id="menu" class="centered">
		<a href="/">主页</a>
		<a href="/blog/">日志</a>
		<a href="/sample/">用例</a>
	</nav>
	<h1>c</h1>
	<div id="content"><h3>?遍历 ?目录 ?workdir</h3><pre><code class="c"><span class="keyword">#include</span> <span class="string">&quot;apue.h&quot;</span>
<span class="keyword">#include</span> <span class="string">&lt;dirent.h&gt;</span>

<span class="type">int</span> <span class="function">main</span>(<span class="type">int</span> <span class="variable">argc</span>, <span class="type">char</span> <span class="operator">*</span><span class="variable">argv</span>[]){
    <span class="type">DIR</span> <span class="operator">*</span><span class="variable">dp</span><span class="delimiter">;</span>
    <span class="keyword">struct</span> <span class="type">dirent</span> <span class="operator">*</span><span class="variable">dirp</span><span class="delimiter">;</span>

    <span class="keyword">if</span> (<span class="variable">argc</span> <span class="operator">!=</span> <span class="number">2</span>){
        <span class="function">err_quit</span>(<span class="string">&quot;usage : ls directory_name&quot;</span>)<span class="delimiter">;</span>
    }

    <span class="keyword">if</span> ((<span class="variable">dp</span> <span class="operator">=</span> <span class="function">opendir</span>(<span class="variable">argv</span>[<span class="number">1</span>])) <span class="operator">==</span> <span class="constant">NULL</span>){
        <span class="function">err_sys</span>(<span class="string">&quot;Can&apos;t open %s&quot;</span>, <span class="variable">argv</span>[<span class="number">1</span>])<span class="delimiter">;</span>
    }

    <span class="keyword">while</span> ((<span class="variable">dirp</span> <span class="operator">=</span> <span class="function">readdir</span>(<span class="variable">dp</span>)) <span class="operator">!=</span> <span class="constant">NULL</span>){
        <span class="function">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="variable">dirp</span><span class="operator">-&gt;</span><span class="property">d_name</span>)<span class="delimiter">;</span>
    }

    <span class="function">closedir</span>(<span class="variable">dp</span>)<span class="delimiter">;</span>
    <span class="function">exit</span>(<span class="number">0</span>)<span class="delimiter">;</span>
}
</code></pre>
<h3>多线程 ?epoll</h3><ol><li>每个线程都处理自己的fd,从而完全避免多线程安全问题;</li><li>使用EPOLLONESHOT标志,即在一次wait返回后禁止fd再产生事件,并在处理完成后使用epoll_ctl的MOD操作重新开启;</li><li>epoll的ET边沿触发模式,需要循环读以读尽数据(在此期间客户端持续不断来数据会造成饥饿):解决办法是构造待处理的list,读到一定的阈值并设置epoll中对应fd不监听读就下一个,遍历完list就进入下一次的eopll_wait(待验证);</li></ol><h3>epoll应用模式</h3><ol><li>单线程:accept,read,更改epollout,write,更改epollin(reactor:读写回调缓冲区|任务队列+线程池)–redis连接少io频繁;skynet带任务队列</li><li>多线程:包含accept,read,write;io密集的2n cpu thread</li><li>多线程:单accept多read&write</li><li>多线程:多accept多read&write(此处多accept同一个lfd,之后epoll_wait会惊群,即使加了exclusive;加锁解决或者多lfd时reuse port更好)</li><li>多进程:reuse port–nginx</li></ol><h3>clock_gettime</h3><ol><li>CLOCK_REALTIME:时钟时间,可调节(如更改系统设定时间),用此时间戳比较先后要慎重,同time(NULL)和gettimeofday类型相同但精度更高</li><li>CLOCK_MONOTONIC:自开机启动后的单调递增时间,受NTP影响,不计系统休眠时间<ol><li>CLOCK_MONOTONIC_RAW:不受NTP影响,不计系统休眠时间</li><li>CLOCK_BOOTTIME:计算系统休眠时间</li></ol></li></ol></div>
</body>
</html>
